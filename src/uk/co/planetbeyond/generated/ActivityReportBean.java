




// ______________________________________________________
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
//
// Author: Javed Kansi
// ______________________________________________________

package uk.co.planetbeyond.generated;

import java.io.Serializable;
import java.util.HashMap;
import java.util.Map;
import java.util.List;

import uk.co.planetbeyond.manager.ActivityReportManagerImpl;
import uk.co.planetbeyond.generated.GeneratedBean;





import uk.co.planetbeyond.generated.exception.DAOException;
import org.apache.commons.lang.builder.CompareToBuilder;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;
import org.apache.commons.lang.builder.ToStringStyle;

import com.sleepycat.persist.model.Persistent;

/**
 * ActivityReportBean is a mapping of activity_report Table.
 * @author sql2java
*/
@Persistent
public class ActivityReportBean extends BaseActivityReportBean implements Serializable, GeneratedBean, JoinHelperInterface
{
	private static final long serialVersionUID = -8109589362533138968L;
	
    private boolean nonSubscribersTotalUniqueIvrCallsIsModified = false;
    private boolean nonSubscribersTotalUniqueIvrCallsIsInitialized = false;

    private boolean nonSubscribersTotalIvrCallsIsModified = false;
    private boolean nonSubscribersTotalIvrCallsIsInitialized = false;

    private boolean nonSubscribersTotalIvrMinutesIsModified = false;
    private boolean nonSubscribersTotalIvrMinutesIsInitialized = false;

    private boolean subscribersTotalUniqueIvrCallsIsModified = false;
    private boolean subscribersTotalUniqueIvrCallsIsInitialized = false;

    private boolean subscribersTotalIvrCallsIsModified = false;
    private boolean subscribersTotalIvrCallsIsInitialized = false;

    private boolean subscribersTotalIvrMinutesIsModified = false;
    private boolean subscribersTotalIvrMinutesIsInitialized = false;

    private boolean reportDateIsModified = false;
    private boolean reportDateIsInitialized = false;

    private boolean activityReportIdIsModified = false;
    private boolean activityReportIdIsInitialized = false;

    private boolean _isNew = true;

    /**
     * Prefered methods to create a ActivityReportBean is via the createActivityReportBean method in ActivityReportManager or
     * via the factory class ActivityReportFactory create method
     */
    public ActivityReportBean()
    {
    }



    /**
     * Setter method for nonSubscribersTotalUniqueIvrCalls.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to nonSubscribersTotalUniqueIvrCalls
     */
    @Override
    public void setNonSubscribersTotalUniqueIvrCalls(Integer newVal)
    {
        if ((newVal != null && nonSubscribersTotalUniqueIvrCalls != null && (newVal.compareTo(nonSubscribersTotalUniqueIvrCalls) == 0)) ||
            (newVal == null && nonSubscribersTotalUniqueIvrCalls == null && nonSubscribersTotalUniqueIvrCallsIsInitialized)) {
            return;
        }
        nonSubscribersTotalUniqueIvrCalls = newVal;
        nonSubscribersTotalUniqueIvrCallsIsModified = true;
        nonSubscribersTotalUniqueIvrCallsIsInitialized = true;
    }

    /**
     * Setter method for nonSubscribersTotalUniqueIvrCalls.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to nonSubscribersTotalUniqueIvrCalls
     */
    public void setNonSubscribersTotalUniqueIvrCalls(int newVal)
    {
        setNonSubscribersTotalUniqueIvrCalls(new Integer(newVal));
    }

    /**
     * Determines if the nonSubscribersTotalUniqueIvrCalls has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isNonSubscribersTotalUniqueIvrCallsModified()
    {
        return nonSubscribersTotalUniqueIvrCallsIsModified;
    }

    /**
     * Manually set whether nonSubscribersTotalUniqueIvrCalls has been modified or not.
     */
    public void isNonSubscribersTotalUniqueIvrCallsModified(boolean value)
    {
        nonSubscribersTotalUniqueIvrCallsIsModified = value;
    }	

    /**
     * Determines if the nonSubscribersTotalUniqueIvrCalls has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isNonSubscribersTotalUniqueIvrCallsInitialized()
    {
        return nonSubscribersTotalUniqueIvrCallsIsInitialized;
    }

    /**
     * Manually set whether nonSubscribersTotalUniqueIvrCalls has been initialized or not.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     */
    public void isNonSubscribersTotalUniqueIvrCallsInitialized(boolean value)
    {
        nonSubscribersTotalUniqueIvrCallsIsInitialized = value;
    }



    /**
     * Setter method for nonSubscribersTotalIvrCalls.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to nonSubscribersTotalIvrCalls
     */
    @Override
    public void setNonSubscribersTotalIvrCalls(Integer newVal)
    {
        if ((newVal != null && nonSubscribersTotalIvrCalls != null && (newVal.compareTo(nonSubscribersTotalIvrCalls) == 0)) ||
            (newVal == null && nonSubscribersTotalIvrCalls == null && nonSubscribersTotalIvrCallsIsInitialized)) {
            return;
        }
        nonSubscribersTotalIvrCalls = newVal;
        nonSubscribersTotalIvrCallsIsModified = true;
        nonSubscribersTotalIvrCallsIsInitialized = true;
    }

    /**
     * Setter method for nonSubscribersTotalIvrCalls.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to nonSubscribersTotalIvrCalls
     */
    public void setNonSubscribersTotalIvrCalls(int newVal)
    {
        setNonSubscribersTotalIvrCalls(new Integer(newVal));
    }

    /**
     * Determines if the nonSubscribersTotalIvrCalls has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isNonSubscribersTotalIvrCallsModified()
    {
        return nonSubscribersTotalIvrCallsIsModified;
    }

    /**
     * Manually set whether nonSubscribersTotalIvrCalls has been modified or not.
     */
    public void isNonSubscribersTotalIvrCallsModified(boolean value)
    {
        nonSubscribersTotalIvrCallsIsModified = value;
    }	

    /**
     * Determines if the nonSubscribersTotalIvrCalls has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isNonSubscribersTotalIvrCallsInitialized()
    {
        return nonSubscribersTotalIvrCallsIsInitialized;
    }

    /**
     * Manually set whether nonSubscribersTotalIvrCalls has been initialized or not.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     */
    public void isNonSubscribersTotalIvrCallsInitialized(boolean value)
    {
        nonSubscribersTotalIvrCallsIsInitialized = value;
    }



    /**
     * Setter method for nonSubscribersTotalIvrMinutes.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to nonSubscribersTotalIvrMinutes
     */
    @Override
    public void setNonSubscribersTotalIvrMinutes(Integer newVal)
    {
        if ((newVal != null && nonSubscribersTotalIvrMinutes != null && (newVal.compareTo(nonSubscribersTotalIvrMinutes) == 0)) ||
            (newVal == null && nonSubscribersTotalIvrMinutes == null && nonSubscribersTotalIvrMinutesIsInitialized)) {
            return;
        }
        nonSubscribersTotalIvrMinutes = newVal;
        nonSubscribersTotalIvrMinutesIsModified = true;
        nonSubscribersTotalIvrMinutesIsInitialized = true;
    }

    /**
     * Setter method for nonSubscribersTotalIvrMinutes.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to nonSubscribersTotalIvrMinutes
     */
    public void setNonSubscribersTotalIvrMinutes(int newVal)
    {
        setNonSubscribersTotalIvrMinutes(new Integer(newVal));
    }

    /**
     * Determines if the nonSubscribersTotalIvrMinutes has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isNonSubscribersTotalIvrMinutesModified()
    {
        return nonSubscribersTotalIvrMinutesIsModified;
    }

    /**
     * Manually set whether nonSubscribersTotalIvrMinutes has been modified or not.
     */
    public void isNonSubscribersTotalIvrMinutesModified(boolean value)
    {
        nonSubscribersTotalIvrMinutesIsModified = value;
    }	

    /**
     * Determines if the nonSubscribersTotalIvrMinutes has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isNonSubscribersTotalIvrMinutesInitialized()
    {
        return nonSubscribersTotalIvrMinutesIsInitialized;
    }

    /**
     * Manually set whether nonSubscribersTotalIvrMinutes has been initialized or not.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     */
    public void isNonSubscribersTotalIvrMinutesInitialized(boolean value)
    {
        nonSubscribersTotalIvrMinutesIsInitialized = value;
    }



    /**
     * Setter method for subscribersTotalUniqueIvrCalls.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to subscribersTotalUniqueIvrCalls
     */
    @Override
    public void setSubscribersTotalUniqueIvrCalls(Integer newVal)
    {
        if ((newVal != null && subscribersTotalUniqueIvrCalls != null && (newVal.compareTo(subscribersTotalUniqueIvrCalls) == 0)) ||
            (newVal == null && subscribersTotalUniqueIvrCalls == null && subscribersTotalUniqueIvrCallsIsInitialized)) {
            return;
        }
        subscribersTotalUniqueIvrCalls = newVal;
        subscribersTotalUniqueIvrCallsIsModified = true;
        subscribersTotalUniqueIvrCallsIsInitialized = true;
    }

    /**
     * Setter method for subscribersTotalUniqueIvrCalls.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to subscribersTotalUniqueIvrCalls
     */
    public void setSubscribersTotalUniqueIvrCalls(int newVal)
    {
        setSubscribersTotalUniqueIvrCalls(new Integer(newVal));
    }

    /**
     * Determines if the subscribersTotalUniqueIvrCalls has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isSubscribersTotalUniqueIvrCallsModified()
    {
        return subscribersTotalUniqueIvrCallsIsModified;
    }

    /**
     * Manually set whether subscribersTotalUniqueIvrCalls has been modified or not.
     */
    public void isSubscribersTotalUniqueIvrCallsModified(boolean value)
    {
        subscribersTotalUniqueIvrCallsIsModified = value;
    }	

    /**
     * Determines if the subscribersTotalUniqueIvrCalls has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isSubscribersTotalUniqueIvrCallsInitialized()
    {
        return subscribersTotalUniqueIvrCallsIsInitialized;
    }

    /**
     * Manually set whether subscribersTotalUniqueIvrCalls has been initialized or not.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     */
    public void isSubscribersTotalUniqueIvrCallsInitialized(boolean value)
    {
        subscribersTotalUniqueIvrCallsIsInitialized = value;
    }



    /**
     * Setter method for subscribersTotalIvrCalls.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to subscribersTotalIvrCalls
     */
    @Override
    public void setSubscribersTotalIvrCalls(Integer newVal)
    {
        if ((newVal != null && subscribersTotalIvrCalls != null && (newVal.compareTo(subscribersTotalIvrCalls) == 0)) ||
            (newVal == null && subscribersTotalIvrCalls == null && subscribersTotalIvrCallsIsInitialized)) {
            return;
        }
        subscribersTotalIvrCalls = newVal;
        subscribersTotalIvrCallsIsModified = true;
        subscribersTotalIvrCallsIsInitialized = true;
    }

    /**
     * Setter method for subscribersTotalIvrCalls.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to subscribersTotalIvrCalls
     */
    public void setSubscribersTotalIvrCalls(int newVal)
    {
        setSubscribersTotalIvrCalls(new Integer(newVal));
    }

    /**
     * Determines if the subscribersTotalIvrCalls has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isSubscribersTotalIvrCallsModified()
    {
        return subscribersTotalIvrCallsIsModified;
    }

    /**
     * Manually set whether subscribersTotalIvrCalls has been modified or not.
     */
    public void isSubscribersTotalIvrCallsModified(boolean value)
    {
        subscribersTotalIvrCallsIsModified = value;
    }	

    /**
     * Determines if the subscribersTotalIvrCalls has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isSubscribersTotalIvrCallsInitialized()
    {
        return subscribersTotalIvrCallsIsInitialized;
    }

    /**
     * Manually set whether subscribersTotalIvrCalls has been initialized or not.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     */
    public void isSubscribersTotalIvrCallsInitialized(boolean value)
    {
        subscribersTotalIvrCallsIsInitialized = value;
    }



    /**
     * Setter method for subscribersTotalIvrMinutes.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to subscribersTotalIvrMinutes
     */
    @Override
    public void setSubscribersTotalIvrMinutes(Integer newVal)
    {
        if ((newVal != null && subscribersTotalIvrMinutes != null && (newVal.compareTo(subscribersTotalIvrMinutes) == 0)) ||
            (newVal == null && subscribersTotalIvrMinutes == null && subscribersTotalIvrMinutesIsInitialized)) {
            return;
        }
        subscribersTotalIvrMinutes = newVal;
        subscribersTotalIvrMinutesIsModified = true;
        subscribersTotalIvrMinutesIsInitialized = true;
    }

    /**
     * Setter method for subscribersTotalIvrMinutes.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to subscribersTotalIvrMinutes
     */
    public void setSubscribersTotalIvrMinutes(int newVal)
    {
        setSubscribersTotalIvrMinutes(new Integer(newVal));
    }

    /**
     * Determines if the subscribersTotalIvrMinutes has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isSubscribersTotalIvrMinutesModified()
    {
        return subscribersTotalIvrMinutesIsModified;
    }

    /**
     * Manually set whether subscribersTotalIvrMinutes has been modified or not.
     */
    public void isSubscribersTotalIvrMinutesModified(boolean value)
    {
        subscribersTotalIvrMinutesIsModified = value;
    }	

    /**
     * Determines if the subscribersTotalIvrMinutes has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isSubscribersTotalIvrMinutesInitialized()
    {
        return subscribersTotalIvrMinutesIsInitialized;
    }

    /**
     * Manually set whether subscribersTotalIvrMinutes has been initialized or not.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     */
    public void isSubscribersTotalIvrMinutesInitialized(boolean value)
    {
        subscribersTotalIvrMinutesIsInitialized = value;
    }



    /**
     * Setter method for reportDate.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to reportDate
     */
    @Override
    public void setReportDate(java.util.Date newVal)
    {
        if ((newVal != null && reportDate != null && (newVal.compareTo(reportDate) == 0)) ||
            (newVal == null && reportDate == null && reportDateIsInitialized)) {
            return;
        }
        reportDate = newVal;
        reportDateIsModified = true;
        reportDateIsInitialized = true;
    }

    /**
     * Setter method for reportDate.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to reportDate
     */
    public void setReportDate(long newVal)
    {
        setReportDate(new java.util.Date(newVal));
    }

    /**
     * Determines if the reportDate has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isReportDateModified()
    {
        return reportDateIsModified;
    }

    /**
     * Manually set whether reportDate has been modified or not.
     */
    public void isReportDateModified(boolean value)
    {
        reportDateIsModified = value;
    }	

    /**
     * Determines if the reportDate has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isReportDateInitialized()
    {
        return reportDateIsInitialized;
    }

    /**
     * Manually set whether reportDate has been initialized or not.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     */
    public void isReportDateInitialized(boolean value)
    {
        reportDateIsInitialized = value;
    }



    /**
     * Setter method for activityReportId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to activityReportId
     */
    @Override
    public void setActivityReportId(Integer newVal)
    {
        if ((newVal != null && activityReportId != null && (newVal.compareTo(activityReportId) == 0)) ||
            (newVal == null && activityReportId == null && activityReportIdIsInitialized)) {
            return;
        }
        activityReportId = newVal;
        activityReportIdIsModified = true;
        activityReportIdIsInitialized = true;
    }

    /**
     * Setter method for activityReportId.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to activityReportId
     */
    public void setActivityReportId(int newVal)
    {
        setActivityReportId(new Integer(newVal));
    }

    /**
     * Determines if the activityReportId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isActivityReportIdModified()
    {
        return activityReportIdIsModified;
    }

    /**
     * Manually set whether activityReportId has been modified or not.
     */
    public void isActivityReportIdModified(boolean value)
    {
        activityReportIdIsModified = value;
    }	

    /**
     * Determines if the activityReportId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isActivityReportIdInitialized()
    {
        return activityReportIdIsInitialized;
    }

    /**
     * Manually set whether activityReportId has been initialized or not.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     */
    public void isActivityReportIdInitialized(boolean value)
    {
        activityReportIdIsInitialized = value;
    }

    /**
     * Determines if the current object is new.
     *
     * @return true if the current object is new, false if the object is not new
     */
    public boolean isNew()
    {
        return _isNew;
    }

    /**
     * Specifies to the object if it has been set as new.
     *
     * @param isNew the boolean value to be assigned to the isNew field
     */
    public void isNew(boolean isNew)
    {
        this._isNew = isNew;
    }

    /**
     * Determines if the object has been modified since the last time this method was called.
     * <br>
     * We can also determine if this object has ever been modified since its creation.
     *
     * @return true if the object has been modified, false if the object has not been modified
     */
    public boolean isModified()
    {
        return nonSubscribersTotalUniqueIvrCallsIsModified 		|| nonSubscribersTotalIvrCallsIsModified  		|| nonSubscribersTotalIvrMinutesIsModified  		|| subscribersTotalUniqueIvrCallsIsModified  		|| subscribersTotalIvrCallsIsModified  		|| subscribersTotalIvrMinutesIsModified  		|| reportDateIsModified  		|| activityReportIdIsModified  ;
    }

    /**
     * Resets the object modification status to 'not modified'.
     */
    public void resetIsModified(boolean isModified)
    {
        nonSubscribersTotalUniqueIvrCallsIsModified = isModified;
        nonSubscribersTotalIvrCallsIsModified = isModified;
        nonSubscribersTotalIvrMinutesIsModified = isModified;
        subscribersTotalUniqueIvrCallsIsModified = isModified;
        subscribersTotalIvrCallsIsModified = isModified;
        subscribersTotalIvrMinutesIsModified = isModified;
        reportDateIsModified = isModified;
        activityReportIdIsModified = isModified;
    }

    /**
     * Copies the passed bean into the current bean.
     *
     * @param bean the bean to copy into the current bean
     */
    public void copy(ActivityReportBean bean)
    {
        setNonSubscribersTotalUniqueIvrCalls(bean.getNonSubscribersTotalUniqueIvrCalls());
        setNonSubscribersTotalIvrCalls(bean.getNonSubscribersTotalIvrCalls());
        setNonSubscribersTotalIvrMinutes(bean.getNonSubscribersTotalIvrMinutes());
        setSubscribersTotalUniqueIvrCalls(bean.getSubscribersTotalUniqueIvrCalls());
        setSubscribersTotalIvrCalls(bean.getSubscribersTotalIvrCalls());
        setSubscribersTotalIvrMinutes(bean.getSubscribersTotalIvrMinutes());
        setReportDate(bean.getReportDate());
        setActivityReportId(bean.getActivityReportId());
    }

    /**
     * Converts the current object to stripped form of the bean which only includes the properties of the bean and their getters/
     */
    public BaseActivityReportBean toBaseBean()
    {
	BaseActivityReportBean bean = new BaseActivityReportBean();
        bean.setNonSubscribersTotalUniqueIvrCalls(getNonSubscribersTotalUniqueIvrCalls());
        bean.setNonSubscribersTotalIvrCalls(getNonSubscribersTotalIvrCalls());
        bean.setNonSubscribersTotalIvrMinutes(getNonSubscribersTotalIvrMinutes());
        bean.setSubscribersTotalUniqueIvrCalls(getSubscribersTotalUniqueIvrCalls());
        bean.setSubscribersTotalIvrCalls(getSubscribersTotalIvrCalls());
        bean.setSubscribersTotalIvrMinutes(getSubscribersTotalIvrMinutes());
        bean.setReportDate(getReportDate());
        bean.setActivityReportId(getActivityReportId());
	return bean;
    }
    
    /**
     * Copies ALL properties of the passed bean into the current bean including isNew and isModified etc
     *
     * @param bean the bean to copy into the current bean
     */
    public void copyAll(ActivityReportBean bean)
    {
	copy(bean);
	this._isNew = bean.isNew();
	
	nonSubscribersTotalUniqueIvrCallsIsModified = bean.isNonSubscribersTotalUniqueIvrCallsModified();
  	nonSubscribersTotalUniqueIvrCallsIsInitialized= bean.isNonSubscribersTotalUniqueIvrCallsInitialized();
	nonSubscribersTotalIvrCallsIsModified = bean.isNonSubscribersTotalIvrCallsModified();
  	nonSubscribersTotalIvrCallsIsInitialized= bean.isNonSubscribersTotalIvrCallsInitialized();
	nonSubscribersTotalIvrMinutesIsModified = bean.isNonSubscribersTotalIvrMinutesModified();
  	nonSubscribersTotalIvrMinutesIsInitialized= bean.isNonSubscribersTotalIvrMinutesInitialized();
	subscribersTotalUniqueIvrCallsIsModified = bean.isSubscribersTotalUniqueIvrCallsModified();
  	subscribersTotalUniqueIvrCallsIsInitialized= bean.isSubscribersTotalUniqueIvrCallsInitialized();
	subscribersTotalIvrCallsIsModified = bean.isSubscribersTotalIvrCallsModified();
  	subscribersTotalIvrCallsIsInitialized= bean.isSubscribersTotalIvrCallsInitialized();
	subscribersTotalIvrMinutesIsModified = bean.isSubscribersTotalIvrMinutesModified();
  	subscribersTotalIvrMinutesIsInitialized= bean.isSubscribersTotalIvrMinutesInitialized();
	reportDateIsModified = bean.isReportDateModified();
  	reportDateIsInitialized= bean.isReportDateInitialized();
	activityReportIdIsModified = bean.isActivityReportIdModified();
  	activityReportIdIsInitialized= bean.isActivityReportIdInitialized();
    }    

    /**
     * return a dictionnary of the object
     */
    public Map<String,String> getDictionnary()
    {
        Map<String,String> dictionnary = new HashMap<String,String>();
        dictionnary.put("non_subscribers_total_unique_ivr_calls", getNonSubscribersTotalUniqueIvrCalls() == null ? "" : getNonSubscribersTotalUniqueIvrCalls().toString());
        dictionnary.put("non_subscribers_total_ivr_calls", getNonSubscribersTotalIvrCalls() == null ? "" : getNonSubscribersTotalIvrCalls().toString());
        dictionnary.put("non_subscribers_total_ivr_minutes", getNonSubscribersTotalIvrMinutes() == null ? "" : getNonSubscribersTotalIvrMinutes().toString());
        dictionnary.put("subscribers_total_unique_ivr_calls", getSubscribersTotalUniqueIvrCalls() == null ? "" : getSubscribersTotalUniqueIvrCalls().toString());
        dictionnary.put("subscribers_total_ivr_calls", getSubscribersTotalIvrCalls() == null ? "" : getSubscribersTotalIvrCalls().toString());
        dictionnary.put("subscribers_total_ivr_minutes", getSubscribersTotalIvrMinutes() == null ? "" : getSubscribersTotalIvrMinutes().toString());
        dictionnary.put("report_date", getReportDate() == null ? "" : getReportDate().toString());
        dictionnary.put("activity_report_id", getActivityReportId() == null ? "" : getActivityReportId().toString());
        return dictionnary;
    }

    /**
     * return a dictionnary of the pk columns
     */
    public Map<String,String> getPkDictionnary()
    {
        Map<String,String> dictionnary = new HashMap<String,String>();
        dictionnary.put("activity_report_id", getActivityReportId() == null ? "" : getActivityReportId().toString());
        return dictionnary;
    }

    /**
     * return a the value string representation of the given field
     */
    public String getValue(String column)
    {
        if (null == column || "".equals(column)) {
            return "";
        } else if ("non_subscribers_total_unique_ivr_calls".equalsIgnoreCase(column) || "nonSubscribersTotalUniqueIvrCalls".equalsIgnoreCase(column)) {
            return getNonSubscribersTotalUniqueIvrCalls() == null ? "" : getNonSubscribersTotalUniqueIvrCalls().toString();
        } else if ("non_subscribers_total_ivr_calls".equalsIgnoreCase(column) || "nonSubscribersTotalIvrCalls".equalsIgnoreCase(column)) {
            return getNonSubscribersTotalIvrCalls() == null ? "" : getNonSubscribersTotalIvrCalls().toString();
        } else if ("non_subscribers_total_ivr_minutes".equalsIgnoreCase(column) || "nonSubscribersTotalIvrMinutes".equalsIgnoreCase(column)) {
            return getNonSubscribersTotalIvrMinutes() == null ? "" : getNonSubscribersTotalIvrMinutes().toString();
        } else if ("subscribers_total_unique_ivr_calls".equalsIgnoreCase(column) || "subscribersTotalUniqueIvrCalls".equalsIgnoreCase(column)) {
            return getSubscribersTotalUniqueIvrCalls() == null ? "" : getSubscribersTotalUniqueIvrCalls().toString();
        } else if ("subscribers_total_ivr_calls".equalsIgnoreCase(column) || "subscribersTotalIvrCalls".equalsIgnoreCase(column)) {
            return getSubscribersTotalIvrCalls() == null ? "" : getSubscribersTotalIvrCalls().toString();
        } else if ("subscribers_total_ivr_minutes".equalsIgnoreCase(column) || "subscribersTotalIvrMinutes".equalsIgnoreCase(column)) {
            return getSubscribersTotalIvrMinutes() == null ? "" : getSubscribersTotalIvrMinutes().toString();
        } else if ("report_date".equalsIgnoreCase(column) || "reportDate".equalsIgnoreCase(column)) {
            return getReportDate() == null ? "" : getReportDate().toString();
        } else if ("activity_report_id".equalsIgnoreCase(column) || "activityReportId".equalsIgnoreCase(column)) {
            return getActivityReportId() == null ? "" : getActivityReportId().toString();
        }
        return "";
    }

    /**
	 * @see java.lang.Object#equals(Object)
	 */
	public boolean equals(Object object)
	{
		if (!(object instanceof ActivityReportBean)) {
			return false;
		}

		ActivityReportBean obj = (ActivityReportBean) object;
		return new EqualsBuilder()
            .append(getNonSubscribersTotalUniqueIvrCalls(), obj.getNonSubscribersTotalUniqueIvrCalls())
            .append(getNonSubscribersTotalIvrCalls(), obj.getNonSubscribersTotalIvrCalls())
            .append(getNonSubscribersTotalIvrMinutes(), obj.getNonSubscribersTotalIvrMinutes())
            .append(getSubscribersTotalUniqueIvrCalls(), obj.getSubscribersTotalUniqueIvrCalls())
            .append(getSubscribersTotalIvrCalls(), obj.getSubscribersTotalIvrCalls())
            .append(getSubscribersTotalIvrMinutes(), obj.getSubscribersTotalIvrMinutes())
            .append(getReportDate(), obj.getReportDate())
            .append(getActivityReportId(), obj.getActivityReportId())
            .isEquals();
	}

	/**
	 * @see java.lang.Object#hashCode()
	 */
	public int hashCode()
	{
		return new HashCodeBuilder(-82280557, -700257973)
            .append(getNonSubscribersTotalUniqueIvrCalls())
            .append(getNonSubscribersTotalIvrCalls())
            .append(getNonSubscribersTotalIvrMinutes())
            .append(getSubscribersTotalUniqueIvrCalls())
            .append(getSubscribersTotalIvrCalls())
            .append(getSubscribersTotalIvrMinutes())
            .append(getReportDate())
            .append(getActivityReportId())
            .toHashCode();
	}

	/**
	 * @see java.lang.Object#toString()
	 */
	public String toString()
	{
	    return toString(ToStringStyle.MULTI_LINE_STYLE);
	}

	/**
	 * you can use the following styles:
	 * <li>ToStringStyle.DEFAULT_STYLE</li>
	 * <li>ToStringStyle.MULTI_LINE_STYLE</li>
     * <li>ToStringStyle.NO_FIELD_NAMES_STYLE</li>
     * <li>ToStringStyle.SHORT_PREFIX_STYLE</li>
     * <li>ToStringStyle.SIMPLE_STYLE</li>
	 */
	public String toString(ToStringStyle style) {
		return new ToStringBuilder(this, style)
            .append("non_subscribers_total_unique_ivr_calls", getNonSubscribersTotalUniqueIvrCalls())
            .append("non_subscribers_total_ivr_calls", getNonSubscribersTotalIvrCalls())
            .append("non_subscribers_total_ivr_minutes", getNonSubscribersTotalIvrMinutes())
            .append("subscribers_total_unique_ivr_calls", getSubscribersTotalUniqueIvrCalls())
            .append("subscribers_total_ivr_calls", getSubscribersTotalIvrCalls())
            .append("subscribers_total_ivr_minutes", getSubscribersTotalIvrMinutes())
            .append("report_date", getReportDate())
            .append("activity_report_id", getActivityReportId())
            .toString();
	}


    public int compareTo(Object object)
    {
        ActivityReportBean obj = (ActivityReportBean) object;
        return new CompareToBuilder()
            .append(getNonSubscribersTotalUniqueIvrCalls(), obj.getNonSubscribersTotalUniqueIvrCalls())
            .append(getNonSubscribersTotalIvrCalls(), obj.getNonSubscribersTotalIvrCalls())
            .append(getNonSubscribersTotalIvrMinutes(), obj.getNonSubscribersTotalIvrMinutes())
            .append(getSubscribersTotalUniqueIvrCalls(), obj.getSubscribersTotalUniqueIvrCalls())
            .append(getSubscribersTotalIvrCalls(), obj.getSubscribersTotalIvrCalls())
            .append(getSubscribersTotalIvrMinutes(), obj.getSubscribersTotalIvrMinutes())
            .append(getReportDate(), obj.getReportDate())
            .append(getActivityReportId(), obj.getActivityReportId())
            .toComparison();
   }






    //_____________________________________________________________________
    //

    // SAVE
    //_____________________________________________________________________
    /**
     * Saves the ActivityReportBean bean into the database.
     *
     * @return the inserted or updated bean
     * @throws DAOException
     */
    //12
    public ActivityReportBean save() throws DAOException
    {
        return ActivityReportManagerImpl.getInstance().save(this);
    }

    /**
     * Update the ActivityReportBean bean record in the database according to the changes.
     *
     * @return the updated bean
     * @throws DAOException
     */
    //14
    public ActivityReportBean update() throws DAOException
    {
        return ActivityReportManagerImpl.getInstance().update(this);
    }

    /**
     * Inserts the ActivityReportBean bean record in the database.
     *
     * @return the updated bean
     * @throws DAOException
     */
    //15
    public ActivityReportBean insert() throws DAOException
    {
        return ActivityReportManagerImpl.getInstance().insert(this);
    }

    /**
     * Creates and returns a new instance of ActivityReportBean.
     *
     * @return
     */
    //15
    public BaseGeneratedBean newBaseInstance()
    {
        return ActivityReportManagerImpl.getInstance().createActivityReportBean();
    }

    /**
     * Creates and returns a new instance of ActivityReportBean.
     *
     * @return
     */
    //15
    public static ActivityReportBean newInstance()
    {
        return ActivityReportManagerImpl.getInstance().createActivityReportBean();
    }

    /**
     * Returns manager class for ActivityReport
     *
     * @return
     */
    //15
    public BaseGeneratedManager getBaseManager()
    {
        return ActivityReportManagerImpl.getInstance();
    }

    /**
     * Returns name of the corresponding table i.e. ActivityReport
     *
     * @return
     */
    //15
    public String getTableName()
    {
        return "activity_report";
    }



}
