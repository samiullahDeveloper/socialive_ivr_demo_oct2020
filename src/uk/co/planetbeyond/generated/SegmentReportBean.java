




// ______________________________________________________
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
//
// Author: Javed Kansi
// ______________________________________________________

package uk.co.planetbeyond.generated;

import java.io.Serializable;
import java.util.HashMap;
import java.util.Map;
import java.util.List;

import uk.co.planetbeyond.manager.SegmentReportManagerImpl;
import uk.co.planetbeyond.generated.GeneratedBean;





import uk.co.planetbeyond.generated.exception.DAOException;
import org.apache.commons.lang.builder.CompareToBuilder;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;
import org.apache.commons.lang.builder.ToStringStyle;

import com.sleepycat.persist.model.Persistent;

/**
 * SegmentReportBean is a mapping of segment_report Table.
 * @author sql2java
*/
@Persistent
public class SegmentReportBean extends BaseSegmentReportBean implements Serializable, GeneratedBean, JoinHelperInterface
{
	private static final long serialVersionUID = -8109589362533138968L;
	
    private boolean segmentHitsDurationIsModified = false;
    private boolean segmentHitsDurationIsInitialized = false;

    private boolean segmentUniqueHitsIsModified = false;
    private boolean segmentUniqueHitsIsInitialized = false;

    private boolean segmentHitsIsModified = false;
    private boolean segmentHitsIsInitialized = false;

    private boolean segmentNameIsModified = false;
    private boolean segmentNameIsInitialized = false;

    private boolean reportDateIsModified = false;
    private boolean reportDateIsInitialized = false;

    private boolean segmentReportIdIsModified = false;
    private boolean segmentReportIdIsInitialized = false;

    private boolean _isNew = true;

    /**
     * Prefered methods to create a SegmentReportBean is via the createSegmentReportBean method in SegmentReportManager or
     * via the factory class SegmentReportFactory create method
     */
    public SegmentReportBean()
    {
    }



    /**
     * Setter method for segmentHitsDuration.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to segmentHitsDuration
     */
    @Override
    public void setSegmentHitsDuration(Integer newVal)
    {
        if ((newVal != null && segmentHitsDuration != null && (newVal.compareTo(segmentHitsDuration) == 0)) ||
            (newVal == null && segmentHitsDuration == null && segmentHitsDurationIsInitialized)) {
            return;
        }
        segmentHitsDuration = newVal;
        segmentHitsDurationIsModified = true;
        segmentHitsDurationIsInitialized = true;
    }

    /**
     * Setter method for segmentHitsDuration.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to segmentHitsDuration
     */
    public void setSegmentHitsDuration(int newVal)
    {
        setSegmentHitsDuration(new Integer(newVal));
    }

    /**
     * Determines if the segmentHitsDuration has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isSegmentHitsDurationModified()
    {
        return segmentHitsDurationIsModified;
    }

    /**
     * Manually set whether segmentHitsDuration has been modified or not.
     */
    public void isSegmentHitsDurationModified(boolean value)
    {
        segmentHitsDurationIsModified = value;
    }	

    /**
     * Determines if the segmentHitsDuration has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isSegmentHitsDurationInitialized()
    {
        return segmentHitsDurationIsInitialized;
    }

    /**
     * Manually set whether segmentHitsDuration has been initialized or not.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     */
    public void isSegmentHitsDurationInitialized(boolean value)
    {
        segmentHitsDurationIsInitialized = value;
    }



    /**
     * Setter method for segmentUniqueHits.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to segmentUniqueHits
     */
    @Override
    public void setSegmentUniqueHits(Integer newVal)
    {
        if ((newVal != null && segmentUniqueHits != null && (newVal.compareTo(segmentUniqueHits) == 0)) ||
            (newVal == null && segmentUniqueHits == null && segmentUniqueHitsIsInitialized)) {
            return;
        }
        segmentUniqueHits = newVal;
        segmentUniqueHitsIsModified = true;
        segmentUniqueHitsIsInitialized = true;
    }

    /**
     * Setter method for segmentUniqueHits.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to segmentUniqueHits
     */
    public void setSegmentUniqueHits(int newVal)
    {
        setSegmentUniqueHits(new Integer(newVal));
    }

    /**
     * Determines if the segmentUniqueHits has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isSegmentUniqueHitsModified()
    {
        return segmentUniqueHitsIsModified;
    }

    /**
     * Manually set whether segmentUniqueHits has been modified or not.
     */
    public void isSegmentUniqueHitsModified(boolean value)
    {
        segmentUniqueHitsIsModified = value;
    }	

    /**
     * Determines if the segmentUniqueHits has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isSegmentUniqueHitsInitialized()
    {
        return segmentUniqueHitsIsInitialized;
    }

    /**
     * Manually set whether segmentUniqueHits has been initialized or not.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     */
    public void isSegmentUniqueHitsInitialized(boolean value)
    {
        segmentUniqueHitsIsInitialized = value;
    }



    /**
     * Setter method for segmentHits.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to segmentHits
     */
    @Override
    public void setSegmentHits(Integer newVal)
    {
        if ((newVal != null && segmentHits != null && (newVal.compareTo(segmentHits) == 0)) ||
            (newVal == null && segmentHits == null && segmentHitsIsInitialized)) {
            return;
        }
        segmentHits = newVal;
        segmentHitsIsModified = true;
        segmentHitsIsInitialized = true;
    }

    /**
     * Setter method for segmentHits.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to segmentHits
     */
    public void setSegmentHits(int newVal)
    {
        setSegmentHits(new Integer(newVal));
    }

    /**
     * Determines if the segmentHits has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isSegmentHitsModified()
    {
        return segmentHitsIsModified;
    }

    /**
     * Manually set whether segmentHits has been modified or not.
     */
    public void isSegmentHitsModified(boolean value)
    {
        segmentHitsIsModified = value;
    }	

    /**
     * Determines if the segmentHits has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isSegmentHitsInitialized()
    {
        return segmentHitsIsInitialized;
    }

    /**
     * Manually set whether segmentHits has been initialized or not.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     */
    public void isSegmentHitsInitialized(boolean value)
    {
        segmentHitsIsInitialized = value;
    }



    /**
     * Setter method for segmentName.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to segmentName
     */
    @Override
    public void setSegmentName(String newVal)
    {
        if ((newVal != null && segmentName != null && (newVal.compareTo(segmentName) == 0)) ||
            (newVal == null && segmentName == null && segmentNameIsInitialized)) {
            return;
        }
        segmentName = newVal;
        segmentNameIsModified = true;
        segmentNameIsInitialized = true;
    }

    /**
     * Determines if the segmentName has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isSegmentNameModified()
    {
        return segmentNameIsModified;
    }

    /**
     * Manually set whether segmentName has been modified or not.
     */
    public void isSegmentNameModified(boolean value)
    {
        segmentNameIsModified = value;
    }	

    /**
     * Determines if the segmentName has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isSegmentNameInitialized()
    {
        return segmentNameIsInitialized;
    }

    /**
     * Manually set whether segmentName has been initialized or not.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     */
    public void isSegmentNameInitialized(boolean value)
    {
        segmentNameIsInitialized = value;
    }



    /**
     * Setter method for reportDate.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to reportDate
     */
    @Override
    public void setReportDate(java.util.Date newVal)
    {
        if ((newVal != null && reportDate != null && (newVal.compareTo(reportDate) == 0)) ||
            (newVal == null && reportDate == null && reportDateIsInitialized)) {
            return;
        }
        reportDate = newVal;
        reportDateIsModified = true;
        reportDateIsInitialized = true;
    }

    /**
     * Setter method for reportDate.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to reportDate
     */
    public void setReportDate(long newVal)
    {
        setReportDate(new java.util.Date(newVal));
    }

    /**
     * Determines if the reportDate has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isReportDateModified()
    {
        return reportDateIsModified;
    }

    /**
     * Manually set whether reportDate has been modified or not.
     */
    public void isReportDateModified(boolean value)
    {
        reportDateIsModified = value;
    }	

    /**
     * Determines if the reportDate has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isReportDateInitialized()
    {
        return reportDateIsInitialized;
    }

    /**
     * Manually set whether reportDate has been initialized or not.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     */
    public void isReportDateInitialized(boolean value)
    {
        reportDateIsInitialized = value;
    }



    /**
     * Setter method for segmentReportId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to segmentReportId
     */
    @Override
    public void setSegmentReportId(Integer newVal)
    {
        if ((newVal != null && segmentReportId != null && (newVal.compareTo(segmentReportId) == 0)) ||
            (newVal == null && segmentReportId == null && segmentReportIdIsInitialized)) {
            return;
        }
        segmentReportId = newVal;
        segmentReportIdIsModified = true;
        segmentReportIdIsInitialized = true;
    }

    /**
     * Setter method for segmentReportId.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to segmentReportId
     */
    public void setSegmentReportId(int newVal)
    {
        setSegmentReportId(new Integer(newVal));
    }

    /**
     * Determines if the segmentReportId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isSegmentReportIdModified()
    {
        return segmentReportIdIsModified;
    }

    /**
     * Manually set whether segmentReportId has been modified or not.
     */
    public void isSegmentReportIdModified(boolean value)
    {
        segmentReportIdIsModified = value;
    }	

    /**
     * Determines if the segmentReportId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isSegmentReportIdInitialized()
    {
        return segmentReportIdIsInitialized;
    }

    /**
     * Manually set whether segmentReportId has been initialized or not.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     */
    public void isSegmentReportIdInitialized(boolean value)
    {
        segmentReportIdIsInitialized = value;
    }

    /**
     * Determines if the current object is new.
     *
     * @return true if the current object is new, false if the object is not new
     */
    public boolean isNew()
    {
        return _isNew;
    }

    /**
     * Specifies to the object if it has been set as new.
     *
     * @param isNew the boolean value to be assigned to the isNew field
     */
    public void isNew(boolean isNew)
    {
        this._isNew = isNew;
    }

    /**
     * Determines if the object has been modified since the last time this method was called.
     * <br>
     * We can also determine if this object has ever been modified since its creation.
     *
     * @return true if the object has been modified, false if the object has not been modified
     */
    public boolean isModified()
    {
        return segmentHitsDurationIsModified 		|| segmentUniqueHitsIsModified  		|| segmentHitsIsModified  		|| segmentNameIsModified  		|| reportDateIsModified  		|| segmentReportIdIsModified  ;
    }

    /**
     * Resets the object modification status to 'not modified'.
     */
    public void resetIsModified(boolean isModified)
    {
        segmentHitsDurationIsModified = isModified;
        segmentUniqueHitsIsModified = isModified;
        segmentHitsIsModified = isModified;
        segmentNameIsModified = isModified;
        reportDateIsModified = isModified;
        segmentReportIdIsModified = isModified;
    }

    /**
     * Copies the passed bean into the current bean.
     *
     * @param bean the bean to copy into the current bean
     */
    public void copy(SegmentReportBean bean)
    {
        setSegmentHitsDuration(bean.getSegmentHitsDuration());
        setSegmentUniqueHits(bean.getSegmentUniqueHits());
        setSegmentHits(bean.getSegmentHits());
        setSegmentName(bean.getSegmentName());
        setReportDate(bean.getReportDate());
        setSegmentReportId(bean.getSegmentReportId());
    }

    /**
     * Converts the current object to stripped form of the bean which only includes the properties of the bean and their getters/
     */
    public BaseSegmentReportBean toBaseBean()
    {
	BaseSegmentReportBean bean = new BaseSegmentReportBean();
        bean.setSegmentHitsDuration(getSegmentHitsDuration());
        bean.setSegmentUniqueHits(getSegmentUniqueHits());
        bean.setSegmentHits(getSegmentHits());
        bean.setSegmentName(getSegmentName());
        bean.setReportDate(getReportDate());
        bean.setSegmentReportId(getSegmentReportId());
	return bean;
    }
    
    /**
     * Copies ALL properties of the passed bean into the current bean including isNew and isModified etc
     *
     * @param bean the bean to copy into the current bean
     */
    public void copyAll(SegmentReportBean bean)
    {
	copy(bean);
	this._isNew = bean.isNew();
	
	segmentHitsDurationIsModified = bean.isSegmentHitsDurationModified();
  	segmentHitsDurationIsInitialized= bean.isSegmentHitsDurationInitialized();
	segmentUniqueHitsIsModified = bean.isSegmentUniqueHitsModified();
  	segmentUniqueHitsIsInitialized= bean.isSegmentUniqueHitsInitialized();
	segmentHitsIsModified = bean.isSegmentHitsModified();
  	segmentHitsIsInitialized= bean.isSegmentHitsInitialized();
	segmentNameIsModified = bean.isSegmentNameModified();
  	segmentNameIsInitialized= bean.isSegmentNameInitialized();
	reportDateIsModified = bean.isReportDateModified();
  	reportDateIsInitialized= bean.isReportDateInitialized();
	segmentReportIdIsModified = bean.isSegmentReportIdModified();
  	segmentReportIdIsInitialized= bean.isSegmentReportIdInitialized();
    }    

    /**
     * return a dictionnary of the object
     */
    public Map<String,String> getDictionnary()
    {
        Map<String,String> dictionnary = new HashMap<String,String>();
        dictionnary.put("segment_hits_duration", getSegmentHitsDuration() == null ? "" : getSegmentHitsDuration().toString());
        dictionnary.put("segment_unique_hits", getSegmentUniqueHits() == null ? "" : getSegmentUniqueHits().toString());
        dictionnary.put("segment_hits", getSegmentHits() == null ? "" : getSegmentHits().toString());
        dictionnary.put("segment_name", getSegmentName() == null ? "" : getSegmentName().toString());
        dictionnary.put("report_date", getReportDate() == null ? "" : getReportDate().toString());
        dictionnary.put("segment_report_id", getSegmentReportId() == null ? "" : getSegmentReportId().toString());
        return dictionnary;
    }

    /**
     * return a dictionnary of the pk columns
     */
    public Map<String,String> getPkDictionnary()
    {
        Map<String,String> dictionnary = new HashMap<String,String>();
        dictionnary.put("segment_report_id", getSegmentReportId() == null ? "" : getSegmentReportId().toString());
        return dictionnary;
    }

    /**
     * return a the value string representation of the given field
     */
    public String getValue(String column)
    {
        if (null == column || "".equals(column)) {
            return "";
        } else if ("segment_hits_duration".equalsIgnoreCase(column) || "segmentHitsDuration".equalsIgnoreCase(column)) {
            return getSegmentHitsDuration() == null ? "" : getSegmentHitsDuration().toString();
        } else if ("segment_unique_hits".equalsIgnoreCase(column) || "segmentUniqueHits".equalsIgnoreCase(column)) {
            return getSegmentUniqueHits() == null ? "" : getSegmentUniqueHits().toString();
        } else if ("segment_hits".equalsIgnoreCase(column) || "segmentHits".equalsIgnoreCase(column)) {
            return getSegmentHits() == null ? "" : getSegmentHits().toString();
        } else if ("segment_name".equalsIgnoreCase(column) || "segmentName".equalsIgnoreCase(column)) {
            return getSegmentName() == null ? "" : getSegmentName().toString();
        } else if ("report_date".equalsIgnoreCase(column) || "reportDate".equalsIgnoreCase(column)) {
            return getReportDate() == null ? "" : getReportDate().toString();
        } else if ("segment_report_id".equalsIgnoreCase(column) || "segmentReportId".equalsIgnoreCase(column)) {
            return getSegmentReportId() == null ? "" : getSegmentReportId().toString();
        }
        return "";
    }

    /**
	 * @see java.lang.Object#equals(Object)
	 */
	public boolean equals(Object object)
	{
		if (!(object instanceof SegmentReportBean)) {
			return false;
		}

		SegmentReportBean obj = (SegmentReportBean) object;
		return new EqualsBuilder()
            .append(getSegmentHitsDuration(), obj.getSegmentHitsDuration())
            .append(getSegmentUniqueHits(), obj.getSegmentUniqueHits())
            .append(getSegmentHits(), obj.getSegmentHits())
            .append(getSegmentName(), obj.getSegmentName())
            .append(getReportDate(), obj.getReportDate())
            .append(getSegmentReportId(), obj.getSegmentReportId())
            .isEquals();
	}

	/**
	 * @see java.lang.Object#hashCode()
	 */
	public int hashCode()
	{
		return new HashCodeBuilder(-82280557, -700257973)
            .append(getSegmentHitsDuration())
            .append(getSegmentUniqueHits())
            .append(getSegmentHits())
            .append(getSegmentName())
            .append(getReportDate())
            .append(getSegmentReportId())
            .toHashCode();
	}

	/**
	 * @see java.lang.Object#toString()
	 */
	public String toString()
	{
	    return toString(ToStringStyle.MULTI_LINE_STYLE);
	}

	/**
	 * you can use the following styles:
	 * <li>ToStringStyle.DEFAULT_STYLE</li>
	 * <li>ToStringStyle.MULTI_LINE_STYLE</li>
     * <li>ToStringStyle.NO_FIELD_NAMES_STYLE</li>
     * <li>ToStringStyle.SHORT_PREFIX_STYLE</li>
     * <li>ToStringStyle.SIMPLE_STYLE</li>
	 */
	public String toString(ToStringStyle style) {
		return new ToStringBuilder(this, style)
            .append("segment_hits_duration", getSegmentHitsDuration())
            .append("segment_unique_hits", getSegmentUniqueHits())
            .append("segment_hits", getSegmentHits())
            .append("segment_name", getSegmentName())
            .append("report_date", getReportDate())
            .append("segment_report_id", getSegmentReportId())
            .toString();
	}


    public int compareTo(Object object)
    {
        SegmentReportBean obj = (SegmentReportBean) object;
        return new CompareToBuilder()
            .append(getSegmentHitsDuration(), obj.getSegmentHitsDuration())
            .append(getSegmentUniqueHits(), obj.getSegmentUniqueHits())
            .append(getSegmentHits(), obj.getSegmentHits())
            .append(getSegmentName(), obj.getSegmentName())
            .append(getReportDate(), obj.getReportDate())
            .append(getSegmentReportId(), obj.getSegmentReportId())
            .toComparison();
   }






    //_____________________________________________________________________
    //

    // SAVE
    //_____________________________________________________________________
    /**
     * Saves the SegmentReportBean bean into the database.
     *
     * @return the inserted or updated bean
     * @throws DAOException
     */
    //12
    public SegmentReportBean save() throws DAOException
    {
        return SegmentReportManagerImpl.getInstance().save(this);
    }

    /**
     * Update the SegmentReportBean bean record in the database according to the changes.
     *
     * @return the updated bean
     * @throws DAOException
     */
    //14
    public SegmentReportBean update() throws DAOException
    {
        return SegmentReportManagerImpl.getInstance().update(this);
    }

    /**
     * Inserts the SegmentReportBean bean record in the database.
     *
     * @return the updated bean
     * @throws DAOException
     */
    //15
    public SegmentReportBean insert() throws DAOException
    {
        return SegmentReportManagerImpl.getInstance().insert(this);
    }

    /**
     * Creates and returns a new instance of SegmentReportBean.
     *
     * @return
     */
    //15
    public BaseGeneratedBean newBaseInstance()
    {
        return SegmentReportManagerImpl.getInstance().createSegmentReportBean();
    }

    /**
     * Creates and returns a new instance of SegmentReportBean.
     *
     * @return
     */
    //15
    public static SegmentReportBean newInstance()
    {
        return SegmentReportManagerImpl.getInstance().createSegmentReportBean();
    }

    /**
     * Returns manager class for SegmentReport
     *
     * @return
     */
    //15
    public BaseGeneratedManager getBaseManager()
    {
        return SegmentReportManagerImpl.getInstance();
    }

    /**
     * Returns name of the corresponding table i.e. SegmentReport
     *
     * @return
     */
    //15
    public String getTableName()
    {
        return "segment_report";
    }



}
