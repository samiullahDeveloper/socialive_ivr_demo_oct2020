




// ______________________________________________________
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
//
// Author: Javed Kansi
// ______________________________________________________

package uk.co.planetbeyond.generated;

import java.io.Serializable;
import java.util.HashMap;
import java.util.Map;
import java.util.List;

import uk.co.planetbeyond.manager.ContentManagerImpl;
import uk.co.planetbeyond.generated.GeneratedBean;

import uk.co.planetbeyond.generated.cache.CategoryCache;

import uk.co.planetbeyond.generated.CategoryBean;
import uk.co.planetbeyond.manager.CategoryManagerImpl;



import uk.co.planetbeyond.generated.exception.DAOException;
import org.apache.commons.lang.builder.CompareToBuilder;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;
import org.apache.commons.lang.builder.ToStringStyle;

import com.sleepycat.persist.model.Persistent;

/**
 * ContentBean is a mapping of content Table.
 * @author sql2java
*/
@Persistent
public class ContentBean extends BaseContentBean implements Serializable, GeneratedBean, JoinHelperInterface
{
	private static final long serialVersionUID = -8109589362533138968L;
	
    private boolean menuNumberIsModified = false;
    private boolean menuNumberIsInitialized = false;

    private boolean synchronizationTimestampIsModified = false;
    private boolean synchronizationTimestampIsInitialized = false;

    private boolean statusIsModified = false;
    private boolean statusIsInitialized = false;

    private boolean filenameIsModified = false;
    private boolean filenameIsInitialized = false;

    private boolean creationTimestampIsModified = false;
    private boolean creationTimestampIsInitialized = false;

    private boolean categoryIdIsModified = false;
    private boolean categoryIdIsInitialized = false;

    private boolean contentIdIsModified = false;
    private boolean contentIdIsInitialized = false;

    private boolean _isNew = true;

    /**
     * Prefered methods to create a ContentBean is via the createContentBean method in ContentManager or
     * via the factory class ContentFactory create method
     */
    public ContentBean()
    {
    }



    /**
     * Setter method for menuNumber.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to menuNumber
     */
    @Override
    public void setMenuNumber(Integer newVal)
    {
        if ((newVal != null && menuNumber != null && (newVal.compareTo(menuNumber) == 0)) ||
            (newVal == null && menuNumber == null && menuNumberIsInitialized)) {
            return;
        }
        menuNumber = newVal;
        menuNumberIsModified = true;
        menuNumberIsInitialized = true;
    }

    /**
     * Setter method for menuNumber.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to menuNumber
     */
    public void setMenuNumber(int newVal)
    {
        setMenuNumber(new Integer(newVal));
    }

    /**
     * Determines if the menuNumber has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isMenuNumberModified()
    {
        return menuNumberIsModified;
    }

    /**
     * Manually set whether menuNumber has been modified or not.
     */
    public void isMenuNumberModified(boolean value)
    {
        menuNumberIsModified = value;
    }	

    /**
     * Determines if the menuNumber has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isMenuNumberInitialized()
    {
        return menuNumberIsInitialized;
    }

    /**
     * Manually set whether menuNumber has been initialized or not.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     */
    public void isMenuNumberInitialized(boolean value)
    {
        menuNumberIsInitialized = value;
    }



    /**
     * Setter method for synchronizationTimestamp.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to synchronizationTimestamp
     */
    @Override
    public void setSynchronizationTimestamp(java.util.Date newVal)
    {
        if ((newVal != null && synchronizationTimestamp != null && (newVal.compareTo(synchronizationTimestamp) == 0)) ||
            (newVal == null && synchronizationTimestamp == null && synchronizationTimestampIsInitialized)) {
            return;
        }
        synchronizationTimestamp = newVal;
        synchronizationTimestampIsModified = true;
        synchronizationTimestampIsInitialized = true;
    }

    /**
     * Setter method for synchronizationTimestamp.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to synchronizationTimestamp
     */
    public void setSynchronizationTimestamp(long newVal)
    {
        setSynchronizationTimestamp(new java.util.Date(newVal));
    }

    /**
     * Determines if the synchronizationTimestamp has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isSynchronizationTimestampModified()
    {
        return synchronizationTimestampIsModified;
    }

    /**
     * Manually set whether synchronizationTimestamp has been modified or not.
     */
    public void isSynchronizationTimestampModified(boolean value)
    {
        synchronizationTimestampIsModified = value;
    }	

    /**
     * Determines if the synchronizationTimestamp has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isSynchronizationTimestampInitialized()
    {
        return synchronizationTimestampIsInitialized;
    }

    /**
     * Manually set whether synchronizationTimestamp has been initialized or not.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     */
    public void isSynchronizationTimestampInitialized(boolean value)
    {
        synchronizationTimestampIsInitialized = value;
    }



    /**
     * Setter method for status.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to status
     */
    @Override
    public void setStatus(Integer newVal)
    {
        if ((newVal != null && status != null && (newVal.compareTo(status) == 0)) ||
            (newVal == null && status == null && statusIsInitialized)) {
            return;
        }
        status = newVal;
        statusIsModified = true;
        statusIsInitialized = true;
    }

    /**
     * Setter method for status.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to status
     */
    public void setStatus(int newVal)
    {
        setStatus(new Integer(newVal));
    }

    /**
     * Determines if the status has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isStatusModified()
    {
        return statusIsModified;
    }

    /**
     * Manually set whether status has been modified or not.
     */
    public void isStatusModified(boolean value)
    {
        statusIsModified = value;
    }	

    /**
     * Determines if the status has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isStatusInitialized()
    {
        return statusIsInitialized;
    }

    /**
     * Manually set whether status has been initialized or not.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     */
    public void isStatusInitialized(boolean value)
    {
        statusIsInitialized = value;
    }



    /**
     * Setter method for filename.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to filename
     */
    @Override
    public void setFilename(String newVal)
    {
        if ((newVal != null && filename != null && (newVal.compareTo(filename) == 0)) ||
            (newVal == null && filename == null && filenameIsInitialized)) {
            return;
        }
        filename = newVal;
        filenameIsModified = true;
        filenameIsInitialized = true;
    }

    /**
     * Determines if the filename has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isFilenameModified()
    {
        return filenameIsModified;
    }

    /**
     * Manually set whether filename has been modified or not.
     */
    public void isFilenameModified(boolean value)
    {
        filenameIsModified = value;
    }	

    /**
     * Determines if the filename has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isFilenameInitialized()
    {
        return filenameIsInitialized;
    }

    /**
     * Manually set whether filename has been initialized or not.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     */
    public void isFilenameInitialized(boolean value)
    {
        filenameIsInitialized = value;
    }



    /**
     * Setter method for creationTimestamp.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to creationTimestamp
     */
    @Override
    public void setCreationTimestamp(java.util.Date newVal)
    {
        if ((newVal != null && creationTimestamp != null && (newVal.compareTo(creationTimestamp) == 0)) ||
            (newVal == null && creationTimestamp == null && creationTimestampIsInitialized)) {
            return;
        }
        creationTimestamp = newVal;
        creationTimestampIsModified = true;
        creationTimestampIsInitialized = true;
    }

    /**
     * Setter method for creationTimestamp.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to creationTimestamp
     */
    public void setCreationTimestamp(long newVal)
    {
        setCreationTimestamp(new java.util.Date(newVal));
    }

    /**
     * Determines if the creationTimestamp has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isCreationTimestampModified()
    {
        return creationTimestampIsModified;
    }

    /**
     * Manually set whether creationTimestamp has been modified or not.
     */
    public void isCreationTimestampModified(boolean value)
    {
        creationTimestampIsModified = value;
    }	

    /**
     * Determines if the creationTimestamp has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isCreationTimestampInitialized()
    {
        return creationTimestampIsInitialized;
    }

    /**
     * Manually set whether creationTimestamp has been initialized or not.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     */
    public void isCreationTimestampInitialized(boolean value)
    {
        creationTimestampIsInitialized = value;
    }



    /**
     * Setter method for categoryId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to categoryId
     */
    @Override
    public void setCategoryId(Integer newVal)
    {
        if ((newVal != null && categoryId != null && (newVal.compareTo(categoryId) == 0)) ||
            (newVal == null && categoryId == null && categoryIdIsInitialized)) {
            return;
        }
        categoryId = newVal;
        categoryIdIsModified = true;
        categoryIdIsInitialized = true;
    }

    /**
     * Setter method for categoryId.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to categoryId
     */
    public void setCategoryId(int newVal)
    {
        setCategoryId(new Integer(newVal));
    }

    /**
     * Determines if the categoryId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isCategoryIdModified()
    {
        return categoryIdIsModified;
    }

    /**
     * Manually set whether categoryId has been modified or not.
     */
    public void isCategoryIdModified(boolean value)
    {
        categoryIdIsModified = value;
    }	

    /**
     * Determines if the categoryId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isCategoryIdInitialized()
    {
        return categoryIdIsInitialized;
    }

    /**
     * Manually set whether categoryId has been initialized or not.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     */
    public void isCategoryIdInitialized(boolean value)
    {
        categoryIdIsInitialized = value;
    }



    /**
     * Setter method for contentId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to contentId
     */
    @Override
    public void setContentId(Integer newVal)
    {
        if ((newVal != null && contentId != null && (newVal.compareTo(contentId) == 0)) ||
            (newVal == null && contentId == null && contentIdIsInitialized)) {
            return;
        }
        contentId = newVal;
        contentIdIsModified = true;
        contentIdIsInitialized = true;
    }

    /**
     * Setter method for contentId.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to contentId
     */
    public void setContentId(int newVal)
    {
        setContentId(new Integer(newVal));
    }

    /**
     * Determines if the contentId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isContentIdModified()
    {
        return contentIdIsModified;
    }

    /**
     * Manually set whether contentId has been modified or not.
     */
    public void isContentIdModified(boolean value)
    {
        contentIdIsModified = value;
    }	

    /**
     * Determines if the contentId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isContentIdInitialized()
    {
        return contentIdIsInitialized;
    }

    /**
     * Manually set whether contentId has been initialized or not.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     */
    public void isContentIdInitialized(boolean value)
    {
        contentIdIsInitialized = value;
    }

    /** The Category referenced by this bean. */
    private CategoryBean referencedCategory;
    /** Getter method for CategoryBean. */
    public CategoryBean getCategoryBean() {
        return this.referencedCategory;
    }
    /** Setter method for CategoryBean. */
    public void setCategoryBean(CategoryBean reference) {
        this.referencedCategory = reference;
    }
    
    /**
     * Determines if the current object is new.
     *
     * @return true if the current object is new, false if the object is not new
     */
    public boolean isNew()
    {
        return _isNew;
    }

    /**
     * Specifies to the object if it has been set as new.
     *
     * @param isNew the boolean value to be assigned to the isNew field
     */
    public void isNew(boolean isNew)
    {
        this._isNew = isNew;
    }

    /**
     * Determines if the object has been modified since the last time this method was called.
     * <br>
     * We can also determine if this object has ever been modified since its creation.
     *
     * @return true if the object has been modified, false if the object has not been modified
     */
    public boolean isModified()
    {
        return menuNumberIsModified 		|| synchronizationTimestampIsModified  		|| statusIsModified  		|| filenameIsModified  		|| creationTimestampIsModified  		|| categoryIdIsModified  		|| contentIdIsModified  ;
    }

    /**
     * Resets the object modification status to 'not modified'.
     */
    public void resetIsModified(boolean isModified)
    {
        menuNumberIsModified = isModified;
        synchronizationTimestampIsModified = isModified;
        statusIsModified = isModified;
        filenameIsModified = isModified;
        creationTimestampIsModified = isModified;
        categoryIdIsModified = isModified;
        contentIdIsModified = isModified;
    }

    /**
     * Copies the passed bean into the current bean.
     *
     * @param bean the bean to copy into the current bean
     */
    public void copy(ContentBean bean)
    {
        setMenuNumber(bean.getMenuNumber());
        setSynchronizationTimestamp(bean.getSynchronizationTimestamp());
        setStatus(bean.getStatus());
        setFilename(bean.getFilename());
        setCreationTimestamp(bean.getCreationTimestamp());
        setCategoryId(bean.getCategoryId());
        setContentId(bean.getContentId());
    }

    /**
     * Converts the current object to stripped form of the bean which only includes the properties of the bean and their getters/
     */
    public BaseContentBean toBaseBean()
    {
	BaseContentBean bean = new BaseContentBean();
        bean.setMenuNumber(getMenuNumber());
        bean.setSynchronizationTimestamp(getSynchronizationTimestamp());
        bean.setStatus(getStatus());
        bean.setFilename(getFilename());
        bean.setCreationTimestamp(getCreationTimestamp());
        bean.setCategoryId(getCategoryId());
        bean.setContentId(getContentId());
	return bean;
    }
    
    /**
     * Copies ALL properties of the passed bean into the current bean including isNew and isModified etc
     *
     * @param bean the bean to copy into the current bean
     */
    public void copyAll(ContentBean bean)
    {
	copy(bean);
	this._isNew = bean.isNew();
	
	menuNumberIsModified = bean.isMenuNumberModified();
  	menuNumberIsInitialized= bean.isMenuNumberInitialized();
	synchronizationTimestampIsModified = bean.isSynchronizationTimestampModified();
  	synchronizationTimestampIsInitialized= bean.isSynchronizationTimestampInitialized();
	statusIsModified = bean.isStatusModified();
  	statusIsInitialized= bean.isStatusInitialized();
	filenameIsModified = bean.isFilenameModified();
  	filenameIsInitialized= bean.isFilenameInitialized();
	creationTimestampIsModified = bean.isCreationTimestampModified();
  	creationTimestampIsInitialized= bean.isCreationTimestampInitialized();
	categoryIdIsModified = bean.isCategoryIdModified();
  	categoryIdIsInitialized= bean.isCategoryIdInitialized();
	contentIdIsModified = bean.isContentIdModified();
  	contentIdIsInitialized= bean.isContentIdInitialized();
    }    

    /**
     * return a dictionnary of the object
     */
    public Map<String,String> getDictionnary()
    {
        Map<String,String> dictionnary = new HashMap<String,String>();
        dictionnary.put("menu_number", getMenuNumber() == null ? "" : getMenuNumber().toString());
        dictionnary.put("synchronization_timestamp", getSynchronizationTimestamp() == null ? "" : getSynchronizationTimestamp().toString());
        dictionnary.put("status", getStatus() == null ? "" : getStatus().toString());
        dictionnary.put("filename", getFilename() == null ? "" : getFilename().toString());
        dictionnary.put("creation_timestamp", getCreationTimestamp() == null ? "" : getCreationTimestamp().toString());
        dictionnary.put("category_id", getCategoryId() == null ? "" : getCategoryId().toString());
        dictionnary.put("content_id", getContentId() == null ? "" : getContentId().toString());
        return dictionnary;
    }

    /**
     * return a dictionnary of the pk columns
     */
    public Map<String,String> getPkDictionnary()
    {
        Map<String,String> dictionnary = new HashMap<String,String>();
        dictionnary.put("content_id", getContentId() == null ? "" : getContentId().toString());
        return dictionnary;
    }

    /**
     * return a the value string representation of the given field
     */
    public String getValue(String column)
    {
        if (null == column || "".equals(column)) {
            return "";
        } else if ("menu_number".equalsIgnoreCase(column) || "menuNumber".equalsIgnoreCase(column)) {
            return getMenuNumber() == null ? "" : getMenuNumber().toString();
        } else if ("synchronization_timestamp".equalsIgnoreCase(column) || "synchronizationTimestamp".equalsIgnoreCase(column)) {
            return getSynchronizationTimestamp() == null ? "" : getSynchronizationTimestamp().toString();
        } else if ("status".equalsIgnoreCase(column) || "status".equalsIgnoreCase(column)) {
            return getStatus() == null ? "" : getStatus().toString();
        } else if ("filename".equalsIgnoreCase(column) || "filename".equalsIgnoreCase(column)) {
            return getFilename() == null ? "" : getFilename().toString();
        } else if ("creation_timestamp".equalsIgnoreCase(column) || "creationTimestamp".equalsIgnoreCase(column)) {
            return getCreationTimestamp() == null ? "" : getCreationTimestamp().toString();
        } else if ("category_id".equalsIgnoreCase(column) || "categoryId".equalsIgnoreCase(column)) {
            return getCategoryId() == null ? "" : getCategoryId().toString();
        } else if ("content_id".equalsIgnoreCase(column) || "contentId".equalsIgnoreCase(column)) {
            return getContentId() == null ? "" : getContentId().toString();
        }
        return "";
    }

    /**
	 * @see java.lang.Object#equals(Object)
	 */
	public boolean equals(Object object)
	{
		if (!(object instanceof ContentBean)) {
			return false;
		}

		ContentBean obj = (ContentBean) object;
		return new EqualsBuilder()
            .append(getMenuNumber(), obj.getMenuNumber())
            .append(getSynchronizationTimestamp(), obj.getSynchronizationTimestamp())
            .append(getStatus(), obj.getStatus())
            .append(getFilename(), obj.getFilename())
            .append(getCreationTimestamp(), obj.getCreationTimestamp())
            .append(getCategoryId(), obj.getCategoryId())
            .append(getContentId(), obj.getContentId())
            .isEquals();
	}

	/**
	 * @see java.lang.Object#hashCode()
	 */
	public int hashCode()
	{
		return new HashCodeBuilder(-82280557, -700257973)
            .append(getMenuNumber())
            .append(getSynchronizationTimestamp())
            .append(getStatus())
            .append(getFilename())
            .append(getCreationTimestamp())
            .append(getCategoryId())
            .append(getContentId())
            .toHashCode();
	}

	/**
	 * @see java.lang.Object#toString()
	 */
	public String toString()
	{
	    return toString(ToStringStyle.MULTI_LINE_STYLE);
	}

	/**
	 * you can use the following styles:
	 * <li>ToStringStyle.DEFAULT_STYLE</li>
	 * <li>ToStringStyle.MULTI_LINE_STYLE</li>
     * <li>ToStringStyle.NO_FIELD_NAMES_STYLE</li>
     * <li>ToStringStyle.SHORT_PREFIX_STYLE</li>
     * <li>ToStringStyle.SIMPLE_STYLE</li>
	 */
	public String toString(ToStringStyle style) {
		return new ToStringBuilder(this, style)
            .append("menu_number", getMenuNumber())
            .append("synchronization_timestamp", getSynchronizationTimestamp())
            .append("status", getStatus())
            .append("filename", getFilename())
            .append("creation_timestamp", getCreationTimestamp())
            .append("category_id", getCategoryId())
            .append("content_id", getContentId())
            .toString();
	}


    public int compareTo(Object object)
    {
        ContentBean obj = (ContentBean) object;
        return new CompareToBuilder()
            .append(getMenuNumber(), obj.getMenuNumber())
            .append(getSynchronizationTimestamp(), obj.getSynchronizationTimestamp())
            .append(getStatus(), obj.getStatus())
            .append(getFilename(), obj.getFilename())
            .append(getCreationTimestamp(), obj.getCreationTimestamp())
            .append(getCategoryId(), obj.getCategoryId())
            .append(getContentId(), obj.getContentId())
            .toComparison();
   }






    //////////////////////////////////////
    // GET/SET FOREIGN KEY BEAN METHOD
    //////////////////////////////////////

    /**
     * Retrieves the CategoryBean object from database where content.category_id == category.category_id
     *
     * @return the associated CategoryBean bean
     * @throws DAOException
     */
    //3.1 GET IMPORTED VALUES
    public CategoryBean loadCategory() throws DAOException
    {
        CategoryBean other = CategoryManagerImpl.getInstance().createCategoryBean();
        other.setCategoryId(getCategoryId()); 
        setCategoryBean(CategoryManagerImpl.getInstance().loadUniqueUsingTemplate(other)); 
        return getCategoryBean();
    }
 





    /**
     * Retrieves and stores (if not already present) the CategoryBean object from the cache where content.category_id == category.category_id
     *
     * @return the associated CategoryBean bean
     * @throws DAOException
     */
    //3.4 GET IMPORTED VALUES
    public CategoryBean loadCategoryFromCache() throws DAOException
    {
        return CategoryCache.getInstance().fetchCategory(getCategoryId());
    }



    //_____________________________________________________________________
    //

    // SAVE
    //_____________________________________________________________________
    /**
     * Saves the ContentBean bean into the database.
     *
     * @return the inserted or updated bean
     * @throws DAOException
     */
    //12
    public ContentBean save() throws DAOException
    {
        return ContentManagerImpl.getInstance().save(this);
    }

    /**
     * Update the ContentBean bean record in the database according to the changes.
     *
     * @return the updated bean
     * @throws DAOException
     */
    //14
    public ContentBean update() throws DAOException
    {
        return ContentManagerImpl.getInstance().update(this);
    }

    /**
     * Inserts the ContentBean bean record in the database.
     *
     * @return the updated bean
     * @throws DAOException
     */
    //15
    public ContentBean insert() throws DAOException
    {
        return ContentManagerImpl.getInstance().insert(this);
    }

    /**
     * Creates and returns a new instance of ContentBean.
     *
     * @return
     */
    //15
    public BaseGeneratedBean newBaseInstance()
    {
        return ContentManagerImpl.getInstance().createContentBean();
    }

    /**
     * Creates and returns a new instance of ContentBean.
     *
     * @return
     */
    //15
    public static ContentBean newInstance()
    {
        return ContentManagerImpl.getInstance().createContentBean();
    }

    /**
     * Returns manager class for Content
     *
     * @return
     */
    //15
    public BaseGeneratedManager getBaseManager()
    {
        return ContentManagerImpl.getInstance();
    }

    /**
     * Returns name of the corresponding table i.e. Content
     *
     * @return
     */
    //15
    public String getTableName()
    {
        return "content";
    }



}
