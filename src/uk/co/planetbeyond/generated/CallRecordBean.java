




// ______________________________________________________
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
//
// Author: Javed Kansi
// ______________________________________________________

package uk.co.planetbeyond.generated;

import java.io.Serializable;
import java.util.HashMap;
import java.util.Map;
import java.util.List;

import uk.co.planetbeyond.manager.CallRecordManagerImpl;
import uk.co.planetbeyond.generated.GeneratedBean;





import uk.co.planetbeyond.generated.exception.DAOException;
import org.apache.commons.lang.builder.CompareToBuilder;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;
import org.apache.commons.lang.builder.ToStringStyle;

import com.sleepycat.persist.model.Persistent;

/**
 * CallRecordBean is a mapping of call_record Table.
 * @author sql2java
*/
@Persistent
public class CallRecordBean extends BaseCallRecordBean implements Serializable, GeneratedBean, JoinHelperInterface
{
	private static final long serialVersionUID = -8109589362533138968L;
	
    private boolean durationIsModified = false;
    private boolean durationIsInitialized = false;

    private boolean endTimestampIsModified = false;
    private boolean endTimestampIsInitialized = false;

    private boolean startTimestampIsModified = false;
    private boolean startTimestampIsInitialized = false;

    private boolean msisdnIsModified = false;
    private boolean msisdnIsInitialized = false;

    private boolean shortcodeIsModified = false;
    private boolean shortcodeIsInitialized = false;

    private boolean callRecordIdIsModified = false;
    private boolean callRecordIdIsInitialized = false;

    private boolean _isNew = true;

    /**
     * Prefered methods to create a CallRecordBean is via the createCallRecordBean method in CallRecordManager or
     * via the factory class CallRecordFactory create method
     */
    public CallRecordBean()
    {
    }



    /**
     * Setter method for duration.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to duration
     */
    @Override
    public void setDuration(Integer newVal)
    {
        if ((newVal != null && duration != null && (newVal.compareTo(duration) == 0)) ||
            (newVal == null && duration == null && durationIsInitialized)) {
            return;
        }
        duration = newVal;
        durationIsModified = true;
        durationIsInitialized = true;
    }

    /**
     * Setter method for duration.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to duration
     */
    public void setDuration(int newVal)
    {
        setDuration(new Integer(newVal));
    }

    /**
     * Determines if the duration has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isDurationModified()
    {
        return durationIsModified;
    }

    /**
     * Manually set whether duration has been modified or not.
     */
    public void isDurationModified(boolean value)
    {
        durationIsModified = value;
    }	

    /**
     * Determines if the duration has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isDurationInitialized()
    {
        return durationIsInitialized;
    }

    /**
     * Manually set whether duration has been initialized or not.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     */
    public void isDurationInitialized(boolean value)
    {
        durationIsInitialized = value;
    }



    /**
     * Setter method for endTimestamp.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to endTimestamp
     */
    @Override
    public void setEndTimestamp(java.util.Date newVal)
    {
        if ((newVal != null && endTimestamp != null && (newVal.compareTo(endTimestamp) == 0)) ||
            (newVal == null && endTimestamp == null && endTimestampIsInitialized)) {
            return;
        }
        endTimestamp = newVal;
        endTimestampIsModified = true;
        endTimestampIsInitialized = true;
    }

    /**
     * Setter method for endTimestamp.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to endTimestamp
     */
    public void setEndTimestamp(long newVal)
    {
        setEndTimestamp(new java.util.Date(newVal));
    }

    /**
     * Determines if the endTimestamp has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isEndTimestampModified()
    {
        return endTimestampIsModified;
    }

    /**
     * Manually set whether endTimestamp has been modified or not.
     */
    public void isEndTimestampModified(boolean value)
    {
        endTimestampIsModified = value;
    }	

    /**
     * Determines if the endTimestamp has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isEndTimestampInitialized()
    {
        return endTimestampIsInitialized;
    }

    /**
     * Manually set whether endTimestamp has been initialized or not.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     */
    public void isEndTimestampInitialized(boolean value)
    {
        endTimestampIsInitialized = value;
    }



    /**
     * Setter method for startTimestamp.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to startTimestamp
     */
    @Override
    public void setStartTimestamp(java.util.Date newVal)
    {
        if ((newVal != null && startTimestamp != null && (newVal.compareTo(startTimestamp) == 0)) ||
            (newVal == null && startTimestamp == null && startTimestampIsInitialized)) {
            return;
        }
        startTimestamp = newVal;
        startTimestampIsModified = true;
        startTimestampIsInitialized = true;
    }

    /**
     * Setter method for startTimestamp.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to startTimestamp
     */
    public void setStartTimestamp(long newVal)
    {
        setStartTimestamp(new java.util.Date(newVal));
    }

    /**
     * Determines if the startTimestamp has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isStartTimestampModified()
    {
        return startTimestampIsModified;
    }

    /**
     * Manually set whether startTimestamp has been modified or not.
     */
    public void isStartTimestampModified(boolean value)
    {
        startTimestampIsModified = value;
    }	

    /**
     * Determines if the startTimestamp has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isStartTimestampInitialized()
    {
        return startTimestampIsInitialized;
    }

    /**
     * Manually set whether startTimestamp has been initialized or not.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     */
    public void isStartTimestampInitialized(boolean value)
    {
        startTimestampIsInitialized = value;
    }



    /**
     * Setter method for msisdn.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to msisdn
     */
    @Override
    public void setMsisdn(String newVal)
    {
        if ((newVal != null && msisdn != null && (newVal.compareTo(msisdn) == 0)) ||
            (newVal == null && msisdn == null && msisdnIsInitialized)) {
            return;
        }
        msisdn = newVal;
        msisdnIsModified = true;
        msisdnIsInitialized = true;
    }

    /**
     * Determines if the msisdn has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isMsisdnModified()
    {
        return msisdnIsModified;
    }

    /**
     * Manually set whether msisdn has been modified or not.
     */
    public void isMsisdnModified(boolean value)
    {
        msisdnIsModified = value;
    }	

    /**
     * Determines if the msisdn has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isMsisdnInitialized()
    {
        return msisdnIsInitialized;
    }

    /**
     * Manually set whether msisdn has been initialized or not.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     */
    public void isMsisdnInitialized(boolean value)
    {
        msisdnIsInitialized = value;
    }



    /**
     * Setter method for shortcode.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to shortcode
     */
    @Override
    public void setShortcode(String newVal)
    {
        if ((newVal != null && shortcode != null && (newVal.compareTo(shortcode) == 0)) ||
            (newVal == null && shortcode == null && shortcodeIsInitialized)) {
            return;
        }
        shortcode = newVal;
        shortcodeIsModified = true;
        shortcodeIsInitialized = true;
    }

    /**
     * Determines if the shortcode has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isShortcodeModified()
    {
        return shortcodeIsModified;
    }

    /**
     * Manually set whether shortcode has been modified or not.
     */
    public void isShortcodeModified(boolean value)
    {
        shortcodeIsModified = value;
    }	

    /**
     * Determines if the shortcode has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isShortcodeInitialized()
    {
        return shortcodeIsInitialized;
    }

    /**
     * Manually set whether shortcode has been initialized or not.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     */
    public void isShortcodeInitialized(boolean value)
    {
        shortcodeIsInitialized = value;
    }



    /**
     * Setter method for callRecordId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to callRecordId
     */
    @Override
    public void setCallRecordId(Integer newVal)
    {
        if ((newVal != null && callRecordId != null && (newVal.compareTo(callRecordId) == 0)) ||
            (newVal == null && callRecordId == null && callRecordIdIsInitialized)) {
            return;
        }
        callRecordId = newVal;
        callRecordIdIsModified = true;
        callRecordIdIsInitialized = true;
    }

    /**
     * Setter method for callRecordId.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to callRecordId
     */
    public void setCallRecordId(int newVal)
    {
        setCallRecordId(new Integer(newVal));
    }

    /**
     * Determines if the callRecordId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isCallRecordIdModified()
    {
        return callRecordIdIsModified;
    }

    /**
     * Manually set whether callRecordId has been modified or not.
     */
    public void isCallRecordIdModified(boolean value)
    {
        callRecordIdIsModified = value;
    }	

    /**
     * Determines if the callRecordId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isCallRecordIdInitialized()
    {
        return callRecordIdIsInitialized;
    }

    /**
     * Manually set whether callRecordId has been initialized or not.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     */
    public void isCallRecordIdInitialized(boolean value)
    {
        callRecordIdIsInitialized = value;
    }

    /**
     * Determines if the current object is new.
     *
     * @return true if the current object is new, false if the object is not new
     */
    public boolean isNew()
    {
        return _isNew;
    }

    /**
     * Specifies to the object if it has been set as new.
     *
     * @param isNew the boolean value to be assigned to the isNew field
     */
    public void isNew(boolean isNew)
    {
        this._isNew = isNew;
    }

    /**
     * Determines if the object has been modified since the last time this method was called.
     * <br>
     * We can also determine if this object has ever been modified since its creation.
     *
     * @return true if the object has been modified, false if the object has not been modified
     */
    public boolean isModified()
    {
        return durationIsModified 		|| endTimestampIsModified  		|| startTimestampIsModified  		|| msisdnIsModified  		|| shortcodeIsModified  		|| callRecordIdIsModified  ;
    }

    /**
     * Resets the object modification status to 'not modified'.
     */
    public void resetIsModified(boolean isModified)
    {
        durationIsModified = isModified;
        endTimestampIsModified = isModified;
        startTimestampIsModified = isModified;
        msisdnIsModified = isModified;
        shortcodeIsModified = isModified;
        callRecordIdIsModified = isModified;
    }

    /**
     * Copies the passed bean into the current bean.
     *
     * @param bean the bean to copy into the current bean
     */
    public void copy(CallRecordBean bean)
    {
        setDuration(bean.getDuration());
        setEndTimestamp(bean.getEndTimestamp());
        setStartTimestamp(bean.getStartTimestamp());
        setMsisdn(bean.getMsisdn());
        setShortcode(bean.getShortcode());
        setCallRecordId(bean.getCallRecordId());
    }

    /**
     * Converts the current object to stripped form of the bean which only includes the properties of the bean and their getters/
     */
    public BaseCallRecordBean toBaseBean()
    {
	BaseCallRecordBean bean = new BaseCallRecordBean();
        bean.setDuration(getDuration());
        bean.setEndTimestamp(getEndTimestamp());
        bean.setStartTimestamp(getStartTimestamp());
        bean.setMsisdn(getMsisdn());
        bean.setShortcode(getShortcode());
        bean.setCallRecordId(getCallRecordId());
	return bean;
    }
    
    /**
     * Copies ALL properties of the passed bean into the current bean including isNew and isModified etc
     *
     * @param bean the bean to copy into the current bean
     */
    public void copyAll(CallRecordBean bean)
    {
	copy(bean);
	this._isNew = bean.isNew();
	
	durationIsModified = bean.isDurationModified();
  	durationIsInitialized= bean.isDurationInitialized();
	endTimestampIsModified = bean.isEndTimestampModified();
  	endTimestampIsInitialized= bean.isEndTimestampInitialized();
	startTimestampIsModified = bean.isStartTimestampModified();
  	startTimestampIsInitialized= bean.isStartTimestampInitialized();
	msisdnIsModified = bean.isMsisdnModified();
  	msisdnIsInitialized= bean.isMsisdnInitialized();
	shortcodeIsModified = bean.isShortcodeModified();
  	shortcodeIsInitialized= bean.isShortcodeInitialized();
	callRecordIdIsModified = bean.isCallRecordIdModified();
  	callRecordIdIsInitialized= bean.isCallRecordIdInitialized();
    }    

    /**
     * return a dictionnary of the object
     */
    public Map<String,String> getDictionnary()
    {
        Map<String,String> dictionnary = new HashMap<String,String>();
        dictionnary.put("duration", getDuration() == null ? "" : getDuration().toString());
        dictionnary.put("end_timestamp", getEndTimestamp() == null ? "" : getEndTimestamp().toString());
        dictionnary.put("start_timestamp", getStartTimestamp() == null ? "" : getStartTimestamp().toString());
        dictionnary.put("msisdn", getMsisdn() == null ? "" : getMsisdn().toString());
        dictionnary.put("shortcode", getShortcode() == null ? "" : getShortcode().toString());
        dictionnary.put("call_record_id", getCallRecordId() == null ? "" : getCallRecordId().toString());
        return dictionnary;
    }

    /**
     * return a dictionnary of the pk columns
     */
    public Map<String,String> getPkDictionnary()
    {
        Map<String,String> dictionnary = new HashMap<String,String>();
        dictionnary.put("call_record_id", getCallRecordId() == null ? "" : getCallRecordId().toString());
        return dictionnary;
    }

    /**
     * return a the value string representation of the given field
     */
    public String getValue(String column)
    {
        if (null == column || "".equals(column)) {
            return "";
        } else if ("duration".equalsIgnoreCase(column) || "duration".equalsIgnoreCase(column)) {
            return getDuration() == null ? "" : getDuration().toString();
        } else if ("end_timestamp".equalsIgnoreCase(column) || "endTimestamp".equalsIgnoreCase(column)) {
            return getEndTimestamp() == null ? "" : getEndTimestamp().toString();
        } else if ("start_timestamp".equalsIgnoreCase(column) || "startTimestamp".equalsIgnoreCase(column)) {
            return getStartTimestamp() == null ? "" : getStartTimestamp().toString();
        } else if ("msisdn".equalsIgnoreCase(column) || "msisdn".equalsIgnoreCase(column)) {
            return getMsisdn() == null ? "" : getMsisdn().toString();
        } else if ("shortcode".equalsIgnoreCase(column) || "shortcode".equalsIgnoreCase(column)) {
            return getShortcode() == null ? "" : getShortcode().toString();
        } else if ("call_record_id".equalsIgnoreCase(column) || "callRecordId".equalsIgnoreCase(column)) {
            return getCallRecordId() == null ? "" : getCallRecordId().toString();
        }
        return "";
    }

    /**
	 * @see java.lang.Object#equals(Object)
	 */
	public boolean equals(Object object)
	{
		if (!(object instanceof CallRecordBean)) {
			return false;
		}

		CallRecordBean obj = (CallRecordBean) object;
		return new EqualsBuilder()
            .append(getDuration(), obj.getDuration())
            .append(getEndTimestamp(), obj.getEndTimestamp())
            .append(getStartTimestamp(), obj.getStartTimestamp())
            .append(getMsisdn(), obj.getMsisdn())
            .append(getShortcode(), obj.getShortcode())
            .append(getCallRecordId(), obj.getCallRecordId())
            .isEquals();
	}

	/**
	 * @see java.lang.Object#hashCode()
	 */
	public int hashCode()
	{
		return new HashCodeBuilder(-82280557, -700257973)
            .append(getDuration())
            .append(getEndTimestamp())
            .append(getStartTimestamp())
            .append(getMsisdn())
            .append(getShortcode())
            .append(getCallRecordId())
            .toHashCode();
	}

	/**
	 * @see java.lang.Object#toString()
	 */
	public String toString()
	{
	    return toString(ToStringStyle.MULTI_LINE_STYLE);
	}

	/**
	 * you can use the following styles:
	 * <li>ToStringStyle.DEFAULT_STYLE</li>
	 * <li>ToStringStyle.MULTI_LINE_STYLE</li>
     * <li>ToStringStyle.NO_FIELD_NAMES_STYLE</li>
     * <li>ToStringStyle.SHORT_PREFIX_STYLE</li>
     * <li>ToStringStyle.SIMPLE_STYLE</li>
	 */
	public String toString(ToStringStyle style) {
		return new ToStringBuilder(this, style)
            .append("duration", getDuration())
            .append("end_timestamp", getEndTimestamp())
            .append("start_timestamp", getStartTimestamp())
            .append("msisdn", getMsisdn())
            .append("shortcode", getShortcode())
            .append("call_record_id", getCallRecordId())
            .toString();
	}


    public int compareTo(Object object)
    {
        CallRecordBean obj = (CallRecordBean) object;
        return new CompareToBuilder()
            .append(getDuration(), obj.getDuration())
            .append(getEndTimestamp(), obj.getEndTimestamp())
            .append(getStartTimestamp(), obj.getStartTimestamp())
            .append(getMsisdn(), obj.getMsisdn())
            .append(getShortcode(), obj.getShortcode())
            .append(getCallRecordId(), obj.getCallRecordId())
            .toComparison();
   }






    //_____________________________________________________________________
    //

    // SAVE
    //_____________________________________________________________________
    /**
     * Saves the CallRecordBean bean into the database.
     *
     * @return the inserted or updated bean
     * @throws DAOException
     */
    //12
    public CallRecordBean save() throws DAOException
    {
        return CallRecordManagerImpl.getInstance().save(this);
    }

    /**
     * Update the CallRecordBean bean record in the database according to the changes.
     *
     * @return the updated bean
     * @throws DAOException
     */
    //14
    public CallRecordBean update() throws DAOException
    {
        return CallRecordManagerImpl.getInstance().update(this);
    }

    /**
     * Inserts the CallRecordBean bean record in the database.
     *
     * @return the updated bean
     * @throws DAOException
     */
    //15
    public CallRecordBean insert() throws DAOException
    {
        return CallRecordManagerImpl.getInstance().insert(this);
    }

    /**
     * Creates and returns a new instance of CallRecordBean.
     *
     * @return
     */
    //15
    public BaseGeneratedBean newBaseInstance()
    {
        return CallRecordManagerImpl.getInstance().createCallRecordBean();
    }

    /**
     * Creates and returns a new instance of CallRecordBean.
     *
     * @return
     */
    //15
    public static CallRecordBean newInstance()
    {
        return CallRecordManagerImpl.getInstance().createCallRecordBean();
    }

    /**
     * Returns manager class for CallRecord
     *
     * @return
     */
    //15
    public BaseGeneratedManager getBaseManager()
    {
        return CallRecordManagerImpl.getInstance();
    }

    /**
     * Returns name of the corresponding table i.e. CallRecord
     *
     * @return
     */
    //15
    public String getTableName()
    {
        return "call_record";
    }



}
