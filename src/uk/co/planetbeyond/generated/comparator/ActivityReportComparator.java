




// ______________________________________________________
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
//
// Author: Javed Kansi
// ______________________________________________________

package uk.co.planetbeyond.generated.comparator;

import java.util.Comparator;
import uk.co.planetbeyond.generated.ActivityReportBean;
import uk.co.planetbeyond.generated.ActivityReportManager;


/**
 * Comparator class is used to sort the ActivityReportBean objects.
 * @author sql2java
 */
public class ActivityReportComparator implements Comparator
{
    /**
     * Holds the field on which the comparison is performed.
     */
    private int iType;
    /**
     * Value that will contain the information about the order of the sort: normal or reversal.
     */
    private boolean bReverse;

    /**
     * Constructor class for ActivityReportComparator.
     * <br>
     * Example:
     * <br>
     * <code>Arrays.sort(pArray, new ActivityReportComparator(ActivityReportManager.ID_NON_SUBSCRIBERS_TOTAL_UNIQUE_IVR_CALLS, bReverse));<code>
     *
     * @param iType the field from which you want to sort
     * <br>
     * Possible values are:
     * <ul>
     *   <li>ActivityReportManager.ID_NON_SUBSCRIBERS_TOTAL_UNIQUE_IVR_CALLS
     *   <li>ActivityReportManager.ID_NON_SUBSCRIBERS_TOTAL_IVR_CALLS
     *   <li>ActivityReportManager.ID_NON_SUBSCRIBERS_TOTAL_IVR_MINUTES
     *   <li>ActivityReportManager.ID_SUBSCRIBERS_TOTAL_UNIQUE_IVR_CALLS
     *   <li>ActivityReportManager.ID_SUBSCRIBERS_TOTAL_IVR_CALLS
     *   <li>ActivityReportManager.ID_SUBSCRIBERS_TOTAL_IVR_MINUTES
     *   <li>ActivityReportManager.ID_REPORT_DATE
     *   <li>ActivityReportManager.ID_ACTIVITY_REPORT_ID
     * </ul>
     */
    public ActivityReportComparator(int iType)
    {
        this(iType, false);
    }

    /**
     * Constructor class for ActivityReportComparator.
     * <br>
     * Example:
     * <br>
     * <code>Arrays.sort(pArray, new ActivityReportComparator(ActivityReportManager.ID_NON_SUBSCRIBERS_TOTAL_UNIQUE_IVR_CALLS, bReverse));<code>
     *
     * @param iType the field from which you want to sort.
     * <br>
     * Possible values are:
     * <ul>
     *   <li>ActivityReportManager.ID_NON_SUBSCRIBERS_TOTAL_UNIQUE_IVR_CALLS
     *   <li>ActivityReportManager.ID_NON_SUBSCRIBERS_TOTAL_IVR_CALLS
     *   <li>ActivityReportManager.ID_NON_SUBSCRIBERS_TOTAL_IVR_MINUTES
     *   <li>ActivityReportManager.ID_SUBSCRIBERS_TOTAL_UNIQUE_IVR_CALLS
     *   <li>ActivityReportManager.ID_SUBSCRIBERS_TOTAL_IVR_CALLS
     *   <li>ActivityReportManager.ID_SUBSCRIBERS_TOTAL_IVR_MINUTES
     *   <li>ActivityReportManager.ID_REPORT_DATE
     *   <li>ActivityReportManager.ID_ACTIVITY_REPORT_ID
     * </ul>
     *
     * @param bReverse set this value to true, if you want to reverse the sorting results
     */
    public ActivityReportComparator(int iType, boolean bReverse)
    {
        this.iType = iType;
        this.bReverse = bReverse;
    }

    /**
     * Implementation of the compare method.
     */
    public int compare(Object pObj1, Object pObj2)
    {
        ActivityReportBean b1 = (ActivityReportBean)pObj1;
        ActivityReportBean b2 = (ActivityReportBean)pObj2;
        int iReturn = 0;
        switch(iType)
        {
            case ActivityReportManager.ID_NON_SUBSCRIBERS_TOTAL_UNIQUE_IVR_CALLS:
                if (b1.getNonSubscribersTotalUniqueIvrCalls() == null && b2.getNonSubscribersTotalUniqueIvrCalls() != null) {
                    iReturn = -1;
                } else if (b1.getNonSubscribersTotalUniqueIvrCalls() == null && b2.getNonSubscribersTotalUniqueIvrCalls() == null) {
                    iReturn = 0;
                } else if (b1.getNonSubscribersTotalUniqueIvrCalls() != null && b2.getNonSubscribersTotalUniqueIvrCalls() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getNonSubscribersTotalUniqueIvrCalls().compareTo(b2.getNonSubscribersTotalUniqueIvrCalls());
                }
                break;
            case ActivityReportManager.ID_NON_SUBSCRIBERS_TOTAL_IVR_CALLS:
                if (b1.getNonSubscribersTotalIvrCalls() == null && b2.getNonSubscribersTotalIvrCalls() != null) {
                    iReturn = -1;
                } else if (b1.getNonSubscribersTotalIvrCalls() == null && b2.getNonSubscribersTotalIvrCalls() == null) {
                    iReturn = 0;
                } else if (b1.getNonSubscribersTotalIvrCalls() != null && b2.getNonSubscribersTotalIvrCalls() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getNonSubscribersTotalIvrCalls().compareTo(b2.getNonSubscribersTotalIvrCalls());
                }
                break;
            case ActivityReportManager.ID_NON_SUBSCRIBERS_TOTAL_IVR_MINUTES:
                if (b1.getNonSubscribersTotalIvrMinutes() == null && b2.getNonSubscribersTotalIvrMinutes() != null) {
                    iReturn = -1;
                } else if (b1.getNonSubscribersTotalIvrMinutes() == null && b2.getNonSubscribersTotalIvrMinutes() == null) {
                    iReturn = 0;
                } else if (b1.getNonSubscribersTotalIvrMinutes() != null && b2.getNonSubscribersTotalIvrMinutes() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getNonSubscribersTotalIvrMinutes().compareTo(b2.getNonSubscribersTotalIvrMinutes());
                }
                break;
            case ActivityReportManager.ID_SUBSCRIBERS_TOTAL_UNIQUE_IVR_CALLS:
                if (b1.getSubscribersTotalUniqueIvrCalls() == null && b2.getSubscribersTotalUniqueIvrCalls() != null) {
                    iReturn = -1;
                } else if (b1.getSubscribersTotalUniqueIvrCalls() == null && b2.getSubscribersTotalUniqueIvrCalls() == null) {
                    iReturn = 0;
                } else if (b1.getSubscribersTotalUniqueIvrCalls() != null && b2.getSubscribersTotalUniqueIvrCalls() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getSubscribersTotalUniqueIvrCalls().compareTo(b2.getSubscribersTotalUniqueIvrCalls());
                }
                break;
            case ActivityReportManager.ID_SUBSCRIBERS_TOTAL_IVR_CALLS:
                if (b1.getSubscribersTotalIvrCalls() == null && b2.getSubscribersTotalIvrCalls() != null) {
                    iReturn = -1;
                } else if (b1.getSubscribersTotalIvrCalls() == null && b2.getSubscribersTotalIvrCalls() == null) {
                    iReturn = 0;
                } else if (b1.getSubscribersTotalIvrCalls() != null && b2.getSubscribersTotalIvrCalls() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getSubscribersTotalIvrCalls().compareTo(b2.getSubscribersTotalIvrCalls());
                }
                break;
            case ActivityReportManager.ID_SUBSCRIBERS_TOTAL_IVR_MINUTES:
                if (b1.getSubscribersTotalIvrMinutes() == null && b2.getSubscribersTotalIvrMinutes() != null) {
                    iReturn = -1;
                } else if (b1.getSubscribersTotalIvrMinutes() == null && b2.getSubscribersTotalIvrMinutes() == null) {
                    iReturn = 0;
                } else if (b1.getSubscribersTotalIvrMinutes() != null && b2.getSubscribersTotalIvrMinutes() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getSubscribersTotalIvrMinutes().compareTo(b2.getSubscribersTotalIvrMinutes());
                }
                break;
            case ActivityReportManager.ID_REPORT_DATE:
                if (b1.getReportDate() == null && b2.getReportDate() != null) {
                    iReturn = -1;
                } else if (b1.getReportDate() == null && b2.getReportDate() == null) {
                    iReturn = 0;
                } else if (b1.getReportDate() != null && b2.getReportDate() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getReportDate().compareTo(b2.getReportDate());
                }
                break;
            case ActivityReportManager.ID_ACTIVITY_REPORT_ID:
                if (b1.getActivityReportId() == null && b2.getActivityReportId() != null) {
                    iReturn = -1;
                } else if (b1.getActivityReportId() == null && b2.getActivityReportId() == null) {
                    iReturn = 0;
                } else if (b1.getActivityReportId() != null && b2.getActivityReportId() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getActivityReportId().compareTo(b2.getActivityReportId());
                }
                break;
            default:
                throw new IllegalArgumentException("Type passed for the field is not supported");
        }

        return bReverse ? (-1 * iReturn) : iReturn;
    }}
