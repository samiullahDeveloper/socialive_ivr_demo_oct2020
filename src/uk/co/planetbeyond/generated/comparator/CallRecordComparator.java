




// ______________________________________________________
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
//
// Author: Javed Kansi
// ______________________________________________________

package uk.co.planetbeyond.generated.comparator;

import java.util.Comparator;
import uk.co.planetbeyond.generated.CallRecordBean;
import uk.co.planetbeyond.generated.CallRecordManager;


/**
 * Comparator class is used to sort the CallRecordBean objects.
 * @author sql2java
 */
public class CallRecordComparator implements Comparator
{
    /**
     * Holds the field on which the comparison is performed.
     */
    private int iType;
    /**
     * Value that will contain the information about the order of the sort: normal or reversal.
     */
    private boolean bReverse;

    /**
     * Constructor class for CallRecordComparator.
     * <br>
     * Example:
     * <br>
     * <code>Arrays.sort(pArray, new CallRecordComparator(CallRecordManager.ID_DURATION, bReverse));<code>
     *
     * @param iType the field from which you want to sort
     * <br>
     * Possible values are:
     * <ul>
     *   <li>CallRecordManager.ID_DURATION
     *   <li>CallRecordManager.ID_END_TIMESTAMP
     *   <li>CallRecordManager.ID_START_TIMESTAMP
     *   <li>CallRecordManager.ID_MSISDN
     *   <li>CallRecordManager.ID_SHORTCODE
     *   <li>CallRecordManager.ID_CALL_RECORD_ID
     * </ul>
     */
    public CallRecordComparator(int iType)
    {
        this(iType, false);
    }

    /**
     * Constructor class for CallRecordComparator.
     * <br>
     * Example:
     * <br>
     * <code>Arrays.sort(pArray, new CallRecordComparator(CallRecordManager.ID_DURATION, bReverse));<code>
     *
     * @param iType the field from which you want to sort.
     * <br>
     * Possible values are:
     * <ul>
     *   <li>CallRecordManager.ID_DURATION
     *   <li>CallRecordManager.ID_END_TIMESTAMP
     *   <li>CallRecordManager.ID_START_TIMESTAMP
     *   <li>CallRecordManager.ID_MSISDN
     *   <li>CallRecordManager.ID_SHORTCODE
     *   <li>CallRecordManager.ID_CALL_RECORD_ID
     * </ul>
     *
     * @param bReverse set this value to true, if you want to reverse the sorting results
     */
    public CallRecordComparator(int iType, boolean bReverse)
    {
        this.iType = iType;
        this.bReverse = bReverse;
    }

    /**
     * Implementation of the compare method.
     */
    public int compare(Object pObj1, Object pObj2)
    {
        CallRecordBean b1 = (CallRecordBean)pObj1;
        CallRecordBean b2 = (CallRecordBean)pObj2;
        int iReturn = 0;
        switch(iType)
        {
            case CallRecordManager.ID_DURATION:
                if (b1.getDuration() == null && b2.getDuration() != null) {
                    iReturn = -1;
                } else if (b1.getDuration() == null && b2.getDuration() == null) {
                    iReturn = 0;
                } else if (b1.getDuration() != null && b2.getDuration() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getDuration().compareTo(b2.getDuration());
                }
                break;
            case CallRecordManager.ID_END_TIMESTAMP:
                if (b1.getEndTimestamp() == null && b2.getEndTimestamp() != null) {
                    iReturn = -1;
                } else if (b1.getEndTimestamp() == null && b2.getEndTimestamp() == null) {
                    iReturn = 0;
                } else if (b1.getEndTimestamp() != null && b2.getEndTimestamp() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getEndTimestamp().compareTo(b2.getEndTimestamp());
                }
                break;
            case CallRecordManager.ID_START_TIMESTAMP:
                if (b1.getStartTimestamp() == null && b2.getStartTimestamp() != null) {
                    iReturn = -1;
                } else if (b1.getStartTimestamp() == null && b2.getStartTimestamp() == null) {
                    iReturn = 0;
                } else if (b1.getStartTimestamp() != null && b2.getStartTimestamp() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getStartTimestamp().compareTo(b2.getStartTimestamp());
                }
                break;
            case CallRecordManager.ID_MSISDN:
                if (b1.getMsisdn() == null && b2.getMsisdn() != null) {
                    iReturn = -1;
                } else if (b1.getMsisdn() == null && b2.getMsisdn() == null) {
                    iReturn = 0;
                } else if (b1.getMsisdn() != null && b2.getMsisdn() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getMsisdn().compareTo(b2.getMsisdn());
                }
                break;
            case CallRecordManager.ID_SHORTCODE:
                if (b1.getShortcode() == null && b2.getShortcode() != null) {
                    iReturn = -1;
                } else if (b1.getShortcode() == null && b2.getShortcode() == null) {
                    iReturn = 0;
                } else if (b1.getShortcode() != null && b2.getShortcode() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getShortcode().compareTo(b2.getShortcode());
                }
                break;
            case CallRecordManager.ID_CALL_RECORD_ID:
                if (b1.getCallRecordId() == null && b2.getCallRecordId() != null) {
                    iReturn = -1;
                } else if (b1.getCallRecordId() == null && b2.getCallRecordId() == null) {
                    iReturn = 0;
                } else if (b1.getCallRecordId() != null && b2.getCallRecordId() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getCallRecordId().compareTo(b2.getCallRecordId());
                }
                break;
            default:
                throw new IllegalArgumentException("Type passed for the field is not supported");
        }

        return bReverse ? (-1 * iReturn) : iReturn;
    }}
