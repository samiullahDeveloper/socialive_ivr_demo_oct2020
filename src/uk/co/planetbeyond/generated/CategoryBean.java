




// ______________________________________________________
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
//
// Author: Javed Kansi
// ______________________________________________________

package uk.co.planetbeyond.generated;

import java.io.Serializable;
import java.util.HashMap;
import java.util.Map;
import java.util.List;

import uk.co.planetbeyond.manager.CategoryManagerImpl;
import uk.co.planetbeyond.generated.GeneratedBean;


import uk.co.planetbeyond.generated.ContentBean;
import uk.co.planetbeyond.manager.ContentManagerImpl;



import uk.co.planetbeyond.generated.exception.DAOException;
import org.apache.commons.lang.builder.CompareToBuilder;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;
import org.apache.commons.lang.builder.ToStringStyle;

import com.sleepycat.persist.model.Persistent;

/**
 * CategoryBean is a mapping of category Table.
 * @author sql2java
*/
@Persistent
public class CategoryBean extends BaseCategoryBean implements Serializable, GeneratedBean, JoinHelperInterface
{
	private static final long serialVersionUID = -8109589362533138968L;
	
    private boolean menuNumberIsModified = false;
    private boolean menuNumberIsInitialized = false;

    private boolean contentFolderIsModified = false;
    private boolean contentFolderIsInitialized = false;

    private boolean descriptionIsModified = false;
    private boolean descriptionIsInitialized = false;

    private boolean categoryNameIsModified = false;
    private boolean categoryNameIsInitialized = false;

    private boolean categoryIdIsModified = false;
    private boolean categoryIdIsInitialized = false;

    private boolean _isNew = true;

    /**
     * Prefered methods to create a CategoryBean is via the createCategoryBean method in CategoryManager or
     * via the factory class CategoryFactory create method
     */
    public CategoryBean()
    {
    }



    /**
     * Setter method for menuNumber.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to menuNumber
     */
    @Override
    public void setMenuNumber(Integer newVal)
    {
        if ((newVal != null && menuNumber != null && (newVal.compareTo(menuNumber) == 0)) ||
            (newVal == null && menuNumber == null && menuNumberIsInitialized)) {
            return;
        }
        menuNumber = newVal;
        menuNumberIsModified = true;
        menuNumberIsInitialized = true;
    }

    /**
     * Setter method for menuNumber.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to menuNumber
     */
    public void setMenuNumber(int newVal)
    {
        setMenuNumber(new Integer(newVal));
    }

    /**
     * Determines if the menuNumber has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isMenuNumberModified()
    {
        return menuNumberIsModified;
    }

    /**
     * Manually set whether menuNumber has been modified or not.
     */
    public void isMenuNumberModified(boolean value)
    {
        menuNumberIsModified = value;
    }	

    /**
     * Determines if the menuNumber has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isMenuNumberInitialized()
    {
        return menuNumberIsInitialized;
    }

    /**
     * Manually set whether menuNumber has been initialized or not.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     */
    public void isMenuNumberInitialized(boolean value)
    {
        menuNumberIsInitialized = value;
    }



    /**
     * Setter method for contentFolder.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to contentFolder
     */
    @Override
    public void setContentFolder(String newVal)
    {
        if ((newVal != null && contentFolder != null && (newVal.compareTo(contentFolder) == 0)) ||
            (newVal == null && contentFolder == null && contentFolderIsInitialized)) {
            return;
        }
        contentFolder = newVal;
        contentFolderIsModified = true;
        contentFolderIsInitialized = true;
    }

    /**
     * Determines if the contentFolder has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isContentFolderModified()
    {
        return contentFolderIsModified;
    }

    /**
     * Manually set whether contentFolder has been modified or not.
     */
    public void isContentFolderModified(boolean value)
    {
        contentFolderIsModified = value;
    }	

    /**
     * Determines if the contentFolder has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isContentFolderInitialized()
    {
        return contentFolderIsInitialized;
    }

    /**
     * Manually set whether contentFolder has been initialized or not.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     */
    public void isContentFolderInitialized(boolean value)
    {
        contentFolderIsInitialized = value;
    }



    /**
     * Setter method for description.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to description
     */
    @Override
    public void setDescription(String newVal)
    {
        if ((newVal != null && description != null && (newVal.compareTo(description) == 0)) ||
            (newVal == null && description == null && descriptionIsInitialized)) {
            return;
        }
        description = newVal;
        descriptionIsModified = true;
        descriptionIsInitialized = true;
    }

    /**
     * Determines if the description has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isDescriptionModified()
    {
        return descriptionIsModified;
    }

    /**
     * Manually set whether description has been modified or not.
     */
    public void isDescriptionModified(boolean value)
    {
        descriptionIsModified = value;
    }	

    /**
     * Determines if the description has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isDescriptionInitialized()
    {
        return descriptionIsInitialized;
    }

    /**
     * Manually set whether description has been initialized or not.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     */
    public void isDescriptionInitialized(boolean value)
    {
        descriptionIsInitialized = value;
    }



    /**
     * Setter method for categoryName.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to categoryName
     */
    @Override
    public void setCategoryName(String newVal)
    {
        if ((newVal != null && categoryName != null && (newVal.compareTo(categoryName) == 0)) ||
            (newVal == null && categoryName == null && categoryNameIsInitialized)) {
            return;
        }
        categoryName = newVal;
        categoryNameIsModified = true;
        categoryNameIsInitialized = true;
    }

    /**
     * Determines if the categoryName has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isCategoryNameModified()
    {
        return categoryNameIsModified;
    }

    /**
     * Manually set whether categoryName has been modified or not.
     */
    public void isCategoryNameModified(boolean value)
    {
        categoryNameIsModified = value;
    }	

    /**
     * Determines if the categoryName has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isCategoryNameInitialized()
    {
        return categoryNameIsInitialized;
    }

    /**
     * Manually set whether categoryName has been initialized or not.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     */
    public void isCategoryNameInitialized(boolean value)
    {
        categoryNameIsInitialized = value;
    }



    /**
     * Setter method for categoryId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to categoryId
     */
    @Override
    public void setCategoryId(Integer newVal)
    {
        if ((newVal != null && categoryId != null && (newVal.compareTo(categoryId) == 0)) ||
            (newVal == null && categoryId == null && categoryIdIsInitialized)) {
            return;
        }
        categoryId = newVal;
        categoryIdIsModified = true;
        categoryIdIsInitialized = true;
    }

    /**
     * Setter method for categoryId.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to categoryId
     */
    public void setCategoryId(int newVal)
    {
        setCategoryId(new Integer(newVal));
    }

    /**
     * Determines if the categoryId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isCategoryIdModified()
    {
        return categoryIdIsModified;
    }

    /**
     * Manually set whether categoryId has been modified or not.
     */
    public void isCategoryIdModified(boolean value)
    {
        categoryIdIsModified = value;
    }	

    /**
     * Determines if the categoryId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isCategoryIdInitialized()
    {
        return categoryIdIsInitialized;
    }

    /**
     * Manually set whether categoryId has been initialized or not.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     */
    public void isCategoryIdInitialized(boolean value)
    {
        categoryIdIsInitialized = value;
    }

    /**
     * Determines if the current object is new.
     *
     * @return true if the current object is new, false if the object is not new
     */
    public boolean isNew()
    {
        return _isNew;
    }

    /**
     * Specifies to the object if it has been set as new.
     *
     * @param isNew the boolean value to be assigned to the isNew field
     */
    public void isNew(boolean isNew)
    {
        this._isNew = isNew;
    }

    /**
     * Determines if the object has been modified since the last time this method was called.
     * <br>
     * We can also determine if this object has ever been modified since its creation.
     *
     * @return true if the object has been modified, false if the object has not been modified
     */
    public boolean isModified()
    {
        return menuNumberIsModified 		|| contentFolderIsModified  		|| descriptionIsModified  		|| categoryNameIsModified  		|| categoryIdIsModified  ;
    }

    /**
     * Resets the object modification status to 'not modified'.
     */
    public void resetIsModified(boolean isModified)
    {
        menuNumberIsModified = isModified;
        contentFolderIsModified = isModified;
        descriptionIsModified = isModified;
        categoryNameIsModified = isModified;
        categoryIdIsModified = isModified;
    }

    /**
     * Copies the passed bean into the current bean.
     *
     * @param bean the bean to copy into the current bean
     */
    public void copy(CategoryBean bean)
    {
        setMenuNumber(bean.getMenuNumber());
        setContentFolder(bean.getContentFolder());
        setDescription(bean.getDescription());
        setCategoryName(bean.getCategoryName());
        setCategoryId(bean.getCategoryId());
    }

    /**
     * Converts the current object to stripped form of the bean which only includes the properties of the bean and their getters/
     */
    public BaseCategoryBean toBaseBean()
    {
	BaseCategoryBean bean = new BaseCategoryBean();
        bean.setMenuNumber(getMenuNumber());
        bean.setContentFolder(getContentFolder());
        bean.setDescription(getDescription());
        bean.setCategoryName(getCategoryName());
        bean.setCategoryId(getCategoryId());
	return bean;
    }
    
    /**
     * Copies ALL properties of the passed bean into the current bean including isNew and isModified etc
     *
     * @param bean the bean to copy into the current bean
     */
    public void copyAll(CategoryBean bean)
    {
	copy(bean);
	this._isNew = bean.isNew();
	
	menuNumberIsModified = bean.isMenuNumberModified();
  	menuNumberIsInitialized= bean.isMenuNumberInitialized();
	contentFolderIsModified = bean.isContentFolderModified();
  	contentFolderIsInitialized= bean.isContentFolderInitialized();
	descriptionIsModified = bean.isDescriptionModified();
  	descriptionIsInitialized= bean.isDescriptionInitialized();
	categoryNameIsModified = bean.isCategoryNameModified();
  	categoryNameIsInitialized= bean.isCategoryNameInitialized();
	categoryIdIsModified = bean.isCategoryIdModified();
  	categoryIdIsInitialized= bean.isCategoryIdInitialized();
    }    

    /**
     * return a dictionnary of the object
     */
    public Map<String,String> getDictionnary()
    {
        Map<String,String> dictionnary = new HashMap<String,String>();
        dictionnary.put("menu_number", getMenuNumber() == null ? "" : getMenuNumber().toString());
        dictionnary.put("content_folder", getContentFolder() == null ? "" : getContentFolder().toString());
        dictionnary.put("description", getDescription() == null ? "" : getDescription().toString());
        dictionnary.put("category_name", getCategoryName() == null ? "" : getCategoryName().toString());
        dictionnary.put("category_id", getCategoryId() == null ? "" : getCategoryId().toString());
        return dictionnary;
    }

    /**
     * return a dictionnary of the pk columns
     */
    public Map<String,String> getPkDictionnary()
    {
        Map<String,String> dictionnary = new HashMap<String,String>();
        dictionnary.put("category_id", getCategoryId() == null ? "" : getCategoryId().toString());
        return dictionnary;
    }

    /**
     * return a the value string representation of the given field
     */
    public String getValue(String column)
    {
        if (null == column || "".equals(column)) {
            return "";
        } else if ("menu_number".equalsIgnoreCase(column) || "menuNumber".equalsIgnoreCase(column)) {
            return getMenuNumber() == null ? "" : getMenuNumber().toString();
        } else if ("content_folder".equalsIgnoreCase(column) || "contentFolder".equalsIgnoreCase(column)) {
            return getContentFolder() == null ? "" : getContentFolder().toString();
        } else if ("description".equalsIgnoreCase(column) || "description".equalsIgnoreCase(column)) {
            return getDescription() == null ? "" : getDescription().toString();
        } else if ("category_name".equalsIgnoreCase(column) || "categoryName".equalsIgnoreCase(column)) {
            return getCategoryName() == null ? "" : getCategoryName().toString();
        } else if ("category_id".equalsIgnoreCase(column) || "categoryId".equalsIgnoreCase(column)) {
            return getCategoryId() == null ? "" : getCategoryId().toString();
        }
        return "";
    }

    /**
	 * @see java.lang.Object#equals(Object)
	 */
	public boolean equals(Object object)
	{
		if (!(object instanceof CategoryBean)) {
			return false;
		}

		CategoryBean obj = (CategoryBean) object;
		return new EqualsBuilder()
            .append(getMenuNumber(), obj.getMenuNumber())
            .append(getContentFolder(), obj.getContentFolder())
            .append(getDescription(), obj.getDescription())
            .append(getCategoryName(), obj.getCategoryName())
            .append(getCategoryId(), obj.getCategoryId())
            .isEquals();
	}

	/**
	 * @see java.lang.Object#hashCode()
	 */
	public int hashCode()
	{
		return new HashCodeBuilder(-82280557, -700257973)
            .append(getMenuNumber())
            .append(getContentFolder())
            .append(getDescription())
            .append(getCategoryName())
            .append(getCategoryId())
            .toHashCode();
	}

	/**
	 * @see java.lang.Object#toString()
	 */
	public String toString()
	{
	    return toString(ToStringStyle.MULTI_LINE_STYLE);
	}

	/**
	 * you can use the following styles:
	 * <li>ToStringStyle.DEFAULT_STYLE</li>
	 * <li>ToStringStyle.MULTI_LINE_STYLE</li>
     * <li>ToStringStyle.NO_FIELD_NAMES_STYLE</li>
     * <li>ToStringStyle.SHORT_PREFIX_STYLE</li>
     * <li>ToStringStyle.SIMPLE_STYLE</li>
	 */
	public String toString(ToStringStyle style) {
		return new ToStringBuilder(this, style)
            .append("menu_number", getMenuNumber())
            .append("content_folder", getContentFolder())
            .append("description", getDescription())
            .append("category_name", getCategoryName())
            .append("category_id", getCategoryId())
            .toString();
	}


    public int compareTo(Object object)
    {
        CategoryBean obj = (CategoryBean) object;
        return new CompareToBuilder()
            .append(getMenuNumber(), obj.getMenuNumber())
            .append(getContentFolder(), obj.getContentFolder())
            .append(getDescription(), obj.getDescription())
            .append(getCategoryName(), obj.getCategoryName())
            .append(getCategoryId(), obj.getCategoryId())
            .toComparison();
   }



    //////////////////////////////////////
    // GET/SET IMPORTED KEY BEAN METHOD
    //////////////////////////////////////


    /**
     * Retrieves the ContentBean object from database where category.category_id == content.category_id
     *
     * @return the associated ContentBean bean
     * @throws DAOException
     */
    //3.0 GET IMPORTED
    public List<ContentBean> loadContents() throws DAOException
    {
        ContentBean other = ContentManagerImpl.getInstance().createContentBean();
        other.setCategoryId(getCategoryId());
        return ContentManagerImpl.getInstance().loadUsingTemplateAsList(other);
    }

    /**
     * Retrieves a single object of ContentBean from database where category.category_id == content.category_id
     *
     * @return the associated ContentBean bean
     * @throws DAOException
     */
    //3.0.1 GET IMPORTED
    public ContentBean loadSingleContent() throws DAOException
    {
        List<ContentBean> list = loadContents();
	
	if (list == null || list.size() == 0)
	{
		return null;
	}

	return list.get(0);
    }



    //_____________________________________________________________________
    //

    // SAVE
    //_____________________________________________________________________
    /**
     * Saves the CategoryBean bean into the database.
     *
     * @return the inserted or updated bean
     * @throws DAOException
     */
    //12
    public CategoryBean save() throws DAOException
    {
        return CategoryManagerImpl.getInstance().save(this);
    }

    /**
     * Update the CategoryBean bean record in the database according to the changes.
     *
     * @return the updated bean
     * @throws DAOException
     */
    //14
    public CategoryBean update() throws DAOException
    {
        return CategoryManagerImpl.getInstance().update(this);
    }

    /**
     * Inserts the CategoryBean bean record in the database.
     *
     * @return the updated bean
     * @throws DAOException
     */
    //15
    public CategoryBean insert() throws DAOException
    {
        return CategoryManagerImpl.getInstance().insert(this);
    }

    /**
     * Creates and returns a new instance of CategoryBean.
     *
     * @return
     */
    //15
    public BaseGeneratedBean newBaseInstance()
    {
        return CategoryManagerImpl.getInstance().createCategoryBean();
    }

    /**
     * Creates and returns a new instance of CategoryBean.
     *
     * @return
     */
    //15
    public static CategoryBean newInstance()
    {
        return CategoryManagerImpl.getInstance().createCategoryBean();
    }

    /**
     * Returns manager class for Category
     *
     * @return
     */
    //15
    public BaseGeneratedManager getBaseManager()
    {
        return CategoryManagerImpl.getInstance();
    }

    /**
     * Returns name of the corresponding table i.e. Category
     *
     * @return
     */
    //15
    public String getTableName()
    {
        return "category";
    }



}
