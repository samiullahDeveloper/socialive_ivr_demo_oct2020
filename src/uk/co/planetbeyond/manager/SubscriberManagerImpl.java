// ______________________________________________________
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
//
// Author: Javed Kansi
// ______________________________________________________

package uk.co.planetbeyond.manager;

import java.util.Date;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import uk.co.planetbeyond.generated.SubscriberBean;
import uk.co.planetbeyond.generated.SubscriberManager;
import uk.co.planetbeyond.generated.exception.DAOException;
import uk.co.planetbeyond.managedbean.SubscriberManagedBean;
import uk.co.planetbeyond.service.constants.Constants;

/**
 * If any change needs to be made to the SubscriberManager, it MUST not be made directly Instead the SubscriberManagerImpl class should be used to
 * make the changes
 */
public class SubscriberManagerImpl extends SubscriberManager
{
	static Logger log = LoggerFactory.getLogger(SubscriberManagerImpl.class);
	/**
	 * Singleton instance of this class
	 */
	private static SubscriberManagerImpl singleton = new SubscriberManagerImpl();

	/**
	 * Make the constructor private to make the class singleton
	 */
	private SubscriberManagerImpl()
	{
		super();

		// set the singleton instance of SubscriberManagerImpl class in the SubscriberManager so that
		// SubscriberManager.getInstance() also points to the singleton instance of SubscriberManagerImpl
		setInstance(this);
	}

	/**
	 * To make the singleton instance available to external classes
	 */
	public static SubscriberManagerImpl getInstance()
	{
		return singleton;
	}

	/**
	 * Override this method so that it returns an instance of SubscriberManagedBean instead of SubscriberBean
	 */
	@Override
	public SubscriberBean createSubscriberBean()
	{
		return new SubscriberManagedBean();
	}

	/**
	 * @param msisdn
	 * @param language
	 * @param createdThrough
	 * @return SubscriberBean
	 * @throws Exception
	 */
	public SubscriberBean addSubscriber(String msisdn, String language, Integer createdThrough) throws Exception
	{
		SubscriberBean bean = SubscriberManagerImpl.getInstance().loadSingleEntryByPreparedStatement("WHERE msisdn=?", new Object[] { msisdn }, null);

		// There is a chance that user might have re-subscribed
		if (bean == null)
		{
			bean = new SubscriberManagedBean();
			bean.setMsisdn(msisdn);
			bean.setCreationTimestamp(new Date());
		}

		bean.setStatus(Constants.SUBSCRIBER_STATUS_ACTIVE);
		bean.setLanguage(language);
		bean.setCreatedThrough(createdThrough);
		bean.save();
		return bean;

	}

	/**
	 * <p>
	 * Returns Subscriber if found, else save it in IVR serivce's database and return its instance When User is returned as subscriber by web service
	 * and not stored in IVR service own database. Then Created through is set as SMS to save the record in IVR service's database
	 * </p>
	 * 
	 * @param msisdn
	 * @param language
	 * @return SubscriberBean
	 * @throws Exception
	 */
	public SubscriberBean getAndSaveSubscriber(String msisdn, String language) throws Exception
	{
		SubscriberBean bean = SubscriberManagerImpl.getInstance().loadSingleEntryByPreparedStatement("WHERE msisdn=?", new Object[] { msisdn }, null);

		if (bean == null)
		{
			// When User is returned as subscriber by web service and not stored in web service. Then Created through is set as SMS to save the record
			// in
			// IVR service's database
			bean = new SubscriberManagedBean();
			bean.setMsisdn(msisdn);
			bean.setCreationTimestamp(new Date());
			bean.setStatus(Constants.SUBSCRIBER_STATUS_ACTIVE);
			bean.setLanguage(language);
			bean.setCreatedThrough(Constants.CREATED_THROUGH_SMS);
			bean.save();
		}
		return bean;
	}

	/**
	 * changes status of MSISDN as inactive = 0 and set its deactivation timestamp If it is active in DB
	 * 
	 * @param msisdn
	 * @throws DAOException
	 */
	public void deactivateSubscriber(String msisdn) throws DAOException
	{
		SubscriberBean bean = SubscriberManagerImpl.getInstance().loadSingleEntryByPreparedStatement("WHERE msisdn = ? AND status = ?", new Object[] { msisdn, Constants.SUBSCRIBER_STATUS_ACTIVE }, null);

		// when user is returned as (not a subscriber) by web service and active in IVR database. Then deactivate the user
		if (bean != null)
		{
			bean.setDeactivationTimestamp(new Date());
			bean.setStatus(Constants.SUBSCRIBER_STATUS_INACTIVE);
			bean.update();
		}
	}
}
